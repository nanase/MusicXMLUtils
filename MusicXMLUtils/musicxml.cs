//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.18444
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// このソース コードは xsd によって自動生成されました。Version=4.0.30319.18020 です。
// 

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using MusicXMLUtils.Structure.Opus;
using MusicXMLUtils.Structure.Repeat;

namespace MusicXMLUtils
{
    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("work")]
    public class Work
    {
        [XmlElement("work-number")]
        public string worknumber { get; set; }

        [XmlElement("work-title")]
        public string worktitle { get; set; }

        [XmlElement("opus")]
        public Opus opus { get; set; }
    }    

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("feature")]
    public class Feature
    {
        [XmlAttribute("type", DataType = "token")]
        public string type { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("grouping")]
    public class Grouping
    {
        public Grouping()
        {
            this.number = "1";
        }

        [XmlElement("feature")]
        public Feature[] feature { get; set; }

        [XmlAttribute("type")]
        public StartStopSingle type { get; set; }

        [XmlAttribute(DataType = "token")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlAttribute("member-of", DataType = "token")]
        public string memberof { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "start-stop-single")]
    public enum StartStopSingle
    {
        [XmlEnum("start")]
        Start,

        [XmlEnum("stop")]
        Stop,

        [XmlEnum("single")]
        Single,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("ending")]
    public class Ending
    {
        [XmlAttribute("number", DataType = "token")]
        public string number { get; set; }

        [XmlAttribute("type")]
        public StartStopDiscontinue type { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlAttribute("end-length")]
        public decimal endlength { get; set; }

        [XmlIgnore]
        public bool endlengthSpecified { get; set; }

        [XmlAttribute("text-x")]
        public decimal textx { get; set; }

        [XmlIgnore]
        public bool textxSpecified { get; set; }

        [XmlAttribute("text-y")]
        public decimal texty { get; set; }

        [XmlIgnore]
        public bool textySpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "start-stop-discontinue")]
    public enum StartStopDiscontinue
    {
        [XmlEnum("start")]
        Start,

        [XmlEnum("stop")]
        Stop,

        [XmlEnum("discontinue")]
        Discontinue,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "yes-no")]
    public enum YesNo
    {
        [XmlEnum("yes")]
        Yes,

        [XmlEnum("no")]
        No,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "bar-style-color")]
    public class BarStyleColor
    {
        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public BarStyle Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "bar-style")]
    public enum BarStyle
    {
        [XmlEnum("regular")]
        Regular,

        [XmlEnum("dotted")]
        Dotted,

        [XmlEnum("dashed")]
        Dashed,

        [XmlEnum("heavy")]
        Heavy,

        [XmlEnum("light-light")]
        LightLight,

        [XmlEnum("light-heavy")]
        LightHeavy,

        [XmlEnum("heavy-light")]
        HeavyLight,

        [XmlEnum("heavy-heavy")]
        HeavyHeavy,

        [XmlEnum("tick")]
        Tick,

        [XmlEnum("short")]
        Short,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("barline")]
    public class BarLine
    {
        public BarLine()
        {
            this.location = RightLeftMiddle.Right;
        }

        [XmlElement("bar-style")]
        public BarStyleColor barstyle { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlElement("wavy-line")]
        public WavyLine wavyline { get; set; }

        [XmlElement("segno")]
        public EmptyPrintStyleAlign segno { get; set; }

        [XmlElement("coda")]
        public EmptyPrintStyleAlign coda { get; set; }

        [XmlElement("fermata")]
        public Fermata[] fermata { get; set; }

        [XmlElement("ending")]
        public Ending ending { get; set; }

        [XmlElement("repeat")]
        public Repeat repeat { get; set; }

        [XmlAttribute("location")]
        [DefaultValue(RightLeftMiddle.Right)]
        public RightLeftMiddle location { get; set; }

        [XmlAttribute("segno", DataType = "token")]
        public string segno1 { get; set; }

        [XmlAttribute("coda", DataType = "token")]
        public string coda1 { get; set; }

        [XmlAttribute("divisions")]
        public decimal divisions { get; set; }

        [XmlIgnore]
        public bool divisionsSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "formatted-text")]
    public class FormattedText
    {
        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string space { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("level")]
    public class Level
    {
        [XmlAttribute("reference")]
        public YesNo reference { get; set; }

        [XmlIgnore]
        public bool referenceSpecified { get; set; }

        [XmlAttribute("parentheses")]
        public YesNo parentheses { get; set; }

        [XmlIgnore]
        public bool parenthesesSpecified { get; set; }

        [XmlAttribute("bracket")]
        public YesNo bracket { get; set; }

        [XmlIgnore]
        public bool bracketSpecified { get; set; }

        [XmlAttribute("size")]
        public SymbolSize size { get; set; }

        [XmlIgnore]
        public bool sizeSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "symbol-size")]
    public enum SymbolSize
    {
        [XmlEnum("full")]
        Full,

        [XmlEnum("cue")]
        Cue,

        [XmlEnum("large")]
        Large,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "wavy-line")]
    public class WavyLine
    {
        [XmlAttribute("type")]
        public StartStopContinue type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlAttribute("start-note")]
        public StartNote startnote { get; set; }

        [XmlIgnore]
        public bool startnoteSpecified { get; set; }

        [XmlAttribute("trill-step")]
        public TrillStep trillstep { get; set; }

        [XmlIgnore]
        public bool trillstepSpecified { get; set; }

        [XmlAttribute("two-note-turn")]
        public TwoNoteTurn twonoteturn { get; set; }

        [XmlIgnore]
        public bool twonoteturnSpecified { get; set; }

        [XmlAttribute("accelerate")]
        public YesNo accelerate { get; set; }

        [XmlIgnore]
        public bool accelerateSpecified { get; set; }

        [XmlAttribute("beats")]
        public decimal beats { get; set; }

        [XmlIgnore]
        public bool beatsSpecified { get; set; }

        [XmlAttribute("second-beat")]
        public decimal secondbeat { get; set; }

        [XmlIgnore]
        public bool secondbeatSpecified { get; set; }

        [XmlAttribute("last-beat")]
        public decimal lastbeat { get; set; }

        [XmlIgnore]
        public bool lastbeatSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "start-stop-continue")]
    public enum StartStopContinue
    {
        [XmlEnum("start")]
        Start,

        [XmlEnum("stop")]
        Stop,

        [XmlEnum("continue")]
        Continue,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "above-below")]
    public enum AboveBelow
    {
        [XmlEnum("above")]
        Above,

        [XmlEnum("below")]
        Below,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "start-note")]
    public enum StartNote
    {
        [XmlEnum("upper")]
        Upper,

        [XmlEnum("main")]
        Main,

        [XmlEnum("below")]
        Below,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "trill-step")]
    public enum TrillStep
    {
        [XmlEnum("whole")]
        Whole,

        [XmlEnum("half")]
        Half,

        [XmlEnum("unison")]
        Unison,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "two-note-turn")]
    public enum TwoNoteTurn
    {
        [XmlEnum("whole")]
        Whole,

        [XmlEnum("half")]
        Half,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "empty-print-style-align")]
    public class EmptyPrintStyleAlign
    {
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("fermata")]
    public class Fermata
    {
        [XmlAttribute("type")]
        public UprightInverted type { get; set; }

        [XmlIgnore]
        public bool typeSpecified { get; set; }

        [XmlText]
        public FermataShape Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "upright-inverted")]
    public enum UprightInverted
    {
        [XmlEnum("upright")]
        Upright,

        [XmlEnum("inverted")]
        Inverted,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "fermata-shape")]
    public enum FermataShape
    {
        [XmlEnum("normal")]
        Normal,

        [XmlEnum("angled")]
        Angled,

        [XmlEnum("square")]
        Square,

        [XmlEnum("")]
        Item,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "right-left-middle")]
    public enum RightLeftMiddle
    {
        [XmlEnum("right")]
        Right,

        [XmlEnum("left")]
        Left,

        [XmlEnum("middle")]
        Middle,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "measure-numbering")]
    public class MeasureNumbering
    {
        [XmlText]
        public MeasureNumberingValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "measure-numbering-value")]
    public enum MeasureNumberingValue
    {
        [XmlEnum("none")]
        None,

        [XmlEnum("measure")]
        Measure,

        [XmlEnum("system")]
        System,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "measure-layout")]
    public class MeasureLayout
    {
        [XmlElement("measure-distance")]
        public decimal measuredistance { get; set; }

        [XmlIgnore]
        public bool measuredistanceSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("print")]
    public class Print
    {
        [XmlElement("page-layout")]
        public PageLayout pagelayout { get; set; }

        [XmlElement("system-layout")]
        public SystemLayout systemlayout { get; set; }

        [XmlElement("staff-layout")]
        public StaffLayout[] stafflayout { get; set; }

        [XmlElement("measure-layout")]
        public MeasureLayout measurelayout { get; set; }

        [XmlElement("measure-numbering")]
        public MeasureNumbering measurenumbering { get; set; }

        [XmlElement("part-name-display")]
        public NameDisplay partnamedisplay { get; set; }

        [XmlElement("part-abbreviation-display")]
        public NameDisplay partabbreviationdisplay { get; set; }

        [XmlAttribute("staff-spacing")]
        public decimal staffspacing { get; set; }

        [XmlIgnore]
        public bool staffspacingSpecified { get; set; }

        [XmlAttribute("new-system")]
        public YesNo newsystem { get; set; }

        [XmlIgnore]
        public bool newsystemSpecified { get; set; }

        [XmlAttribute("new-page")]
        public YesNo newpage { get; set; }

        [XmlIgnore]
        public bool newpageSpecified { get; set; }

        [XmlAttribute("blank-page", DataType = "positiveInteger")]
        public string blankpage { get; set; }

        [XmlAttribute("page-number", DataType = "token")]
        public string pagenumber { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "page-layout")]
    public class PageLayout
    {
        [XmlElement("page-height")]
        public decimal pageheight { get; set; }

        [XmlElement("page-width")]
        public decimal pagewidth { get; set; }

        [XmlElement("page-margins")]
        public PageMargins[] pagemargins { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "page-margins")]
    public class PageMargins
    {
        [XmlElement("left-margin")]
        public decimal leftmargin { get; set; }

        [XmlElement("right-margin")]
        public decimal rightmargin { get; set; }

        [XmlElement("top-margin")]
        public decimal topmargin { get; set; }

        [XmlElement("bottom-margin")]
        public decimal bottommargin { get; set; }

        [XmlAttribute("type")]
        public MarginType type { get; set; }

        [XmlIgnore]
        public bool typeSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "margin-type")]
    public enum MarginType
    {
        [XmlEnum("odd")]
        Odd,

        [XmlEnum("even")]
        Even,

        [XmlEnum("both")]
        Both,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "system-layout")]
    public class SystemLayout
    {
        [XmlElement("system-margins")]
        public SystemMargins systemmargins { get; set; }

        [XmlElement("system-distance")]
        public decimal systemdistance { get; set; }

        [XmlIgnore]
        public bool systemdistanceSpecified { get; set; }

        [XmlElement("top-system-distance")]
        public decimal topsystemdistance { get; set; }

        [XmlIgnore]
        public bool topsystemdistanceSpecified { get; set; }

        [XmlElement("system-dividers")]
        public SystemDividers systemdividers { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "system-margins")]
    public class SystemMargins
    {
        [XmlElement("left-margin")]
        public decimal leftmargin { get; set; }

        [XmlElement("right-margin")]
        public decimal rightmargin { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "system-dividers")]
    public class SystemDividers
    {
        [XmlElement("left-divider")]
        public EmptyPrintObjectStyleAlign leftdivider { get; set; }

        [XmlElement("right-divider")]
        public EmptyPrintObjectStyleAlign rightdivider { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "empty-print-object-style-align")]
    public class EmptyPrintObjectStyleAlign
    {
        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "staff-layout")]
    public class StaffLayout
    {
        [XmlElement("staff-distance")]
        public decimal staffdistance { get; set; }

        [XmlIgnore]
        public bool staffdistanceSpecified { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "name-display")]
    public class NameDisplay
    {
        [XmlElement("accidental-text", typeof(AccidentalText))]
        [XmlElement("display-text", typeof(FormattedText))]
        public object[] Items { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "accidental-text")]
    public class AccidentalText
    {
        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string space { get; set; }

        [XmlText]
        public AccidentalValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "accidental-value")]
    public enum AccidentalValue
    {
        [XmlEnum("sharp")]
        Sharp,

        [XmlEnum("natural")]
        Natural,

        [XmlEnum("flat")]
        Flat,

        [XmlEnum("double-sharp")]
        DoubleSharp,

        [XmlEnum("sharp-sharp")]
        SharpSharp,

        [XmlEnum("flat-flat")]
        FlatFlat,

        [XmlEnum("natural-sharp")]
        NaturalSharp,

        [XmlEnum("natural-flat")]
        NaturalFlat,

        [XmlEnum("quarter-flat")]
        QuarterFlat,

        [XmlEnum("quarter-sharp")]
        QuarterSharp,

        [XmlEnum("three-quarters-flat")]
        ThreeQuartersFlat,

        [XmlEnum("three-quarters-sharp")]
        ThreeQuartersSharp,

        [XmlEnum("sharp-down")]
        SharpDown,

        [XmlEnum("sharp-up")]
        SharpUp,

        [XmlEnum("natural-down")]
        NaturalDown,

        [XmlEnum("natural-up")]
        NaturalUp,

        [XmlEnum("flat-down")]
        FlatDown,

        [XmlEnum("flat-up")]
        FlatUp,

        [XmlEnum("triple-sharp")]
        TripleSharp,

        [XmlEnum("triple-flat")]
        TripleFlat,

        [XmlEnum("slash-quarter-sharp")]
        SlashQuarterSharp,

        [XmlEnum("slash-sharp")]
        SlashSharp,

        [XmlEnum("slash-flat")]
        SlashFlat,

        [XmlEnum("double-slash-flat")]
        DoubleSlashFlat,

        [XmlEnum("sharp-1")]
        sharp1,

        [XmlEnum("sharp-2")]
        sharp2,

        [XmlEnum("sharp-3")]
        sharp3,

        [XmlEnum("sharp-5")]
        sharp5,

        [XmlEnum("flat-1")]
        flat1,

        [XmlEnum("flat-2")]
        flat2,

        [XmlEnum("flat-3")]
        flat3,

        [XmlEnum("flat-4")]
        flat4,

        [XmlEnum("sori")]
        Sori,

        [XmlEnum("koron")]
        Koron,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("figure")]
    public class Figure
    {
        [XmlElement("prefix")]
        public StyleText prefix { get; set; }

        [XmlElement("figure-number")]
        public StyleText figurenumber { get; set; }

        [XmlElement("suffix")]
        public StyleText suffix { get; set; }

        [XmlElement("extend")]
        public Extend extend { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "style-text")]
    public class StyleText
    {
        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("extend")]
    public class Extend
    {
        [XmlAttribute("type")]
        public StartStopContinue type { get; set; }

        [XmlIgnore]
        public bool typeSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "figured-bass")]
    public class FiguredBass
    {
        [XmlElement("figure")]
        public Figure[] figure { get; set; }

        [XmlElement("duration")]
        public decimal duration { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlAttribute("print-dot")]
        public YesNo printdot { get; set; }

        [XmlIgnore]
        public bool printdotSpecified { get; set; }

        [XmlAttribute("print-lyric")]
        public YesNo printlyric { get; set; }

        [XmlIgnore]
        public bool printlyricSpecified { get; set; }

        [XmlAttribute("parentheses")]
        public YesNo parentheses { get; set; }

        [XmlIgnore]
        public bool parenthesesSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("barre")]
    public class Barre
    {
        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "start-stop")]
    public enum StartStop
    {
        [XmlEnum("start")]
        Start,

        [XmlEnum("stop")]
        Stop,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "frame-note")]
    public class FrameNote
    {
        public String @string { get; set; }

        [XmlElement("fret")]
        public Fret fret { get; set; }

        [XmlElement("fingering")]
        public Fingering fingering { get; set; }

        [XmlElement("barre")]
        public Barre barre { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("string")]
    public class String
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText(DataType = "positiveInteger")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("fret")]
    public class Fret
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText(DataType = "nonNegativeInteger")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "font-style")]
    public enum FontStyle
    {
        [XmlEnum("normal")]
        Normal,

        [XmlEnum("italic")]
        Italic,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "font-weight")]
    public enum FontWeight
    {
        [XmlEnum("normal")]
        Normal,

        [XmlEnum("bold")]
        Bold,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("fingering")]
    public class Fingering
    {
        [XmlAttribute("substitution")]
        public YesNo substitution { get; set; }

        [XmlIgnore]
        public bool substitutionSpecified { get; set; }

        [XmlAttribute("alternate")]
        public YesNo alternate { get; set; }

        [XmlIgnore]
        public bool alternateSpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "first-fret")]
    public class FirstFret
    {
        [XmlAttribute("text", DataType = "token")]
        public string text { get; set; }

        [XmlAttribute("location")]
        public LeftRight location { get; set; }

        [XmlIgnore]
        public bool locationSpecified { get; set; }

        [XmlText(DataType = "positiveInteger")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "left-right")]
    public enum LeftRight
    {
        [XmlEnum("left")]
        Left,

        [XmlEnum("right")]
        Right,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("frame")]
    public class Frame
    {
        [XmlElement("frame-strings", DataType = "positiveInteger")]
        public string framestrings { get; set; }

        [XmlElement("frame-frets", DataType = "positiveInteger")]
        public string framefrets { get; set; }

        [XmlElement("first-fret")]
        public FirstFret firstfret { get; set; }

        [XmlElement("frame-note")]
        public FrameNote[] framenote { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlAttribute("halign")]
        public LeftCenterRight halign { get; set; }

        [XmlIgnore]
        public bool halignSpecified { get; set; }

        [XmlAttribute("valign")]
        public ValignImage valign { get; set; }

        [XmlIgnore]
        public bool valignSpecified { get; set; }

        [XmlAttribute("height")]
        public decimal height { get; set; }

        [XmlIgnore]
        public bool heightSpecified { get; set; }

        [XmlAttribute("width")]
        public decimal width { get; set; }

        [XmlIgnore]
        public bool widthSpecified { get; set; }

        [XmlAttribute("unplayed", DataType = "token")]
        public string unplayed { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "left-center-right")]
    public enum LeftCenterRight
    {
        [XmlEnum("left")]
        Left,

        [XmlEnum("center")]
        Center,

        [XmlEnum("right")]
        Right,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "valign-image")]
    public enum ValignImage
    {
        [XmlEnum("top")]
        Top,

        [XmlEnum("middle")]
        Middle,

        [XmlEnum("bottom")]
        Bottom,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "degree-type")]
    public class DegreeType
    {
        [XmlAttribute("text", DataType = "token")]
        public string text { get; set; }

        [XmlText]
        public DegreeTypeValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "degree-type-value")]
    public enum DegreeTypeValue
    {
        [XmlEnum("add")]
        Add,
        [XmlEnum("alter")]
        Alter,
        [XmlEnum("subtract")]
        Subtract,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "degree-alter")]
    public class DegreeAlter
    {
        [XmlAttribute("plus-minus")]
        public YesNo plusminus { get; set; }

        [XmlIgnore]
        public bool plusminusSpecified { get; set; }

        [XmlText]
        public decimal Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "degree-value")]
    public class DegreeValue
    {
        [XmlAttribute("symbol")]
        public DegreeSymbolValue symbol { get; set; }

        [XmlIgnore]
        public bool symbolSpecified { get; set; }

        [XmlAttribute("text", DataType = "token")]
        public string text { get; set; }

        [XmlText(DataType = "positiveInteger")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "degree-symbol-value")]
    public enum DegreeSymbolValue
    {
        [XmlEnum("major")]
        Major,

        [XmlEnum("minor")]
        Minor,

        [XmlEnum("augmented")]
        Augmented,

        [XmlEnum("diminished")]
        Diminished,

        [XmlEnum("half-diminished")]
        HalfDiminished,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("degree")]
    public class Degree
    {
        [XmlElement("degree-value")]
        public DegreeValue degreevalue { get; set; }

        [XmlElement("degree-alter")]
        public DegreeAlter degreealter { get; set; }

        [XmlElement("degree-type")]
        public DegreeType degreetype { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "bass-alter")]
    public class BassAlter
    {
        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlAttribute("location")]
        public LeftRight location { get; set; }

        [XmlIgnore]
        public bool locationSpecified { get; set; }

        [XmlText]
        public decimal Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "bass-step")]
    public class BassStep
    {
        [XmlAttribute("text", DataType = "token")]
        public string text { get; set; }

        [XmlText]
        public Step Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("step")]
    public enum Step
    {
        A,

        B,

        C,

        D,

        E,

        F,

        G,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("bass")]
    public class Bass
    {
        [XmlElement("bass-step")]
        public BassStep bassstep { get; set; }

        [XmlElement("bass-alter")]
        public BassAlter bassalter { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("inversion")]
    public class Inversion
    {
        [XmlText(DataType = "nonNegativeInteger")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("kind")]
    public class Kind
    {
        [XmlAttribute("use-symbols")]
        public YesNo usesymbols { get; set; }

        [XmlIgnore]
        public bool usesymbolsSpecified { get; set; }

        [XmlAttribute("text", DataType = "token")]
        public string text { get; set; }

        [XmlAttribute("stack-degrees")]
        public YesNo stackdegrees { get; set; }

        [XmlIgnore]
        public bool stackdegreesSpecified { get; set; }

        [XmlAttribute("parentheses-degrees")]
        public YesNo parenthesesdegrees { get; set; }

        [XmlIgnore]
        public bool parenthesesdegreesSpecified { get; set; }

        [XmlAttribute("bracket-degrees")]
        public YesNo bracketdegrees { get; set; }

        [XmlIgnore]
        public bool bracketdegreesSpecified { get; set; }

        [XmlAttribute("halign")]
        public LeftCenterRight halign { get; set; }

        [XmlIgnore]
        public bool halignSpecified { get; set; }

        [XmlAttribute("valign")]
        public VAlign valign { get; set; }

        [XmlIgnore]
        public bool valignSpecified { get; set; }

        [XmlText]
        public KindValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("valign")]
    public enum VAlign
    {
        [XmlEnum("top")]
        Top,

        [XmlEnum("middle")]
        Middle,

        [XmlEnum("bottom")]
        Bottom,

        [XmlEnum("baseline")]
        Baseline,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "kind-value")]
    public enum KindValue
    {
        [XmlEnum("major")]
        Major,

        [XmlEnum("minor")]
        Minor,

        [XmlEnum("augmented")]
        Augmented,

        [XmlEnum("diminished")]
        Diminished,

        [XmlEnum("dominant")]
        Dominant,

        [XmlEnum("major-seventh")]
        MajorSeventh,

        [XmlEnum("minor-seventh")]
        MinorSeventh,

        [XmlEnum("diminished-seventh")]
        DiminishedSeventh,

        [XmlEnum("augmented-seventh")]
        AugmentedSeventh,

        [XmlEnum("half-diminished")]
        HalfDiminished,

        [XmlEnum("major-minor")]
        MajorMinor,

        [XmlEnum("major-sixth")]
        MajorSixth,

        [XmlEnum("minor-sixth")]
        MinorSixth,

        [XmlEnum("dominant-ninth")]
        DominantNinth,

        [XmlEnum("major-ninth")]
        MajorNinth,

        [XmlEnum("minor-ninth")]
        MinorNinth,

        [XmlEnum("dominant-11th")]
        dominant11th,

        [XmlEnum("major-11th")]
        major11th,

        [XmlEnum("minor-11th")]
        minor11th,

        [XmlEnum("dominant-13th")]
        dominant13th,

        [XmlEnum("major-13th")]
        major13th,

        [XmlEnum("minor-13th")]
        minor13th,

        [XmlEnum("suspended-second")]
        SuspendedSecond,

        [XmlEnum("suspended-fourth")]
        SuspendedFourth,

        [XmlEnum("Neapolitan")]
        Neapolitan,

        [XmlEnum("Italian")]
        Italian,

        [XmlEnum("French")]
        French,

        [XmlEnum("German")]
        German,

        [XmlEnum("pedal")]
        Pedal,

        [XmlEnum("power")]
        Power,

        [XmlEnum("Tristan")]
        Tristan,

        [XmlEnum("other")]
        Other,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "root-alter")]
    public class RootAlter
    {
        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlAttribute("location")]
        public LeftRight location { get; set; }

        [XmlIgnore]
        public bool locationSpecified { get; set; }

        [XmlText]
        public decimal Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "root-step")]
    public class RootStep
    {
        [XmlAttribute("text", DataType = "token")]
        public string text { get; set; }

        [XmlText]
        public Step Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("root")]
    public class Root
    {
        [XmlElement("root-step")]
        public RootStep rootstep { get; set; }

        [XmlElement("root-alter")]
        public RootAlter rootalter { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("harmony")]
    public class Harmony
    {
        [XmlElement("function", typeof(StyleText))]
        [XmlElement("root", typeof(Root))]
        public object[] Items { get; set; }

        [XmlElement("kind")]
        public Kind[] kind { get; set; }

        [XmlElement("inversion")]
        public Inversion[] inversion { get; set; }

        [XmlElement("bass")]
        public Bass[] bass { get; set; }

        [XmlElement("degree")]
        public Degree[] degree { get; set; }

        [XmlElement("frame")]
        public Frame frame { get; set; }

        [XmlElement("offset")]
        public Offset offset { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlElement("staff", DataType = "positiveInteger")]
        public string staff { get; set; }

        [XmlAttribute("type")]
        public HarmonyType type { get; set; }

        [XmlIgnore]
        public bool typeSpecified { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlAttribute("print-frame")]
        public YesNo printframe { get; set; }

        [XmlIgnore]
        public bool printframeSpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("offset")]
    public class Offset
    {
        [XmlAttribute("sound")]
        public YesNo sound { get; set; }

        [XmlIgnore]
        public bool soundSpecified { get; set; }

        [XmlText]
        public decimal Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "harmony-type")]
    public enum HarmonyType
    {
        [XmlEnum("explicit")]
        Explicit,

        [XmlEnum("implied")]
        Implied,

        [XmlEnum("alternate")]
        Alternate,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("slash")]
    public class Slash
    {
        [XmlElement("slash-type")]
        public NoteTypeValue slashtype { get; set; }

        [XmlElement("slash-dot")]
        public Empty[] slashdot { get; set; }

        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("use-dots")]
        public YesNo usedots { get; set; }

        [XmlIgnore]
        public bool usedotsSpecified { get; set; }

        [XmlAttribute("use-stems")]
        public YesNo usestems { get; set; }

        [XmlIgnore]
        public bool usestemsSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "note-type-value")]
    public enum NoteTypeValue
    {
        [XmlEnum("1024th")]
        Item1024th,

        [XmlEnum("512th")]
        Item512th,

        [XmlEnum("256th")]
        Item256th,

        [XmlEnum("128th")]
        Item128th,

        [XmlEnum("64th")]
        Item64th,

        [XmlEnum("32nd")]
        Item32nd,

        [XmlEnum("16th")]
        Item16th,

        [XmlEnum("eighth")]
        Eighth,

        [XmlEnum("quarter")]
        Quarter,

        [XmlEnum("half")]
        Half,

        [XmlEnum("whole")]
        Whole,

        [XmlEnum("breve")]
        Breve,

        [XmlEnum("long")]
        Long,

        [XmlEnum("maxima")]
        Maxima,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("empty")]
    public class Empty
    {
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "beat-repeat")]
    public class BeatRepeat
    {
        [XmlElement("slash-type")]
        public NoteTypeValue slashtype { get; set; }

        [XmlElement("slash-dot")]
        public Empty[] slashdot { get; set; }

        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("slashes", DataType = "positiveInteger")]
        public string slashes { get; set; }

        [XmlAttribute("use-dots")]
        public YesNo usedots { get; set; }

        [XmlIgnore]
        public bool usedotsSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "measure-repeat")]
    public class MeasureRepeat
    {
        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("slashes", DataType = "positiveInteger")]
        public string slashes { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "multiple-rest")]
    public class MultipleRest
    {
        [XmlAttribute("use-symbols")]
        public YesNo usesymbols { get; set; }

        [XmlIgnore]
        public bool usesymbolsSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "measure-style")]
    public class MeasureStyle
    {
        [XmlElement("beat-repeat", typeof(BeatRepeat))]
        [XmlElement("measure-repeat", typeof(MeasureRepeat))]
        [XmlElement("multiple-rest", typeof(MultipleRest))]
        [XmlElement("slash", typeof(Slash))]
        public object Item { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("transpose")]
    public class Transpose
    {
        [XmlElement("diatonic", DataType = "integer")]
        public string diatonic { get; set; }

        [XmlElement("chromatic")]
        public decimal chromatic { get; set; }

        [XmlElement("octave-change", DataType = "integer")]
        public string octavechange { get; set; }

        public Empty @double { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "staff-tuning")]
    public class StaffTuning
    {
        [XmlElement("tuning-step")]
        public Step tuningstep { get; set; }

        [XmlElement("tuning-alter")]
        public decimal tuningalter { get; set; }

        [XmlIgnore]
        public bool tuningalterSpecified { get; set; }

        [XmlElement("tuning-octave", DataType = "integer")]
        public string tuningoctave { get; set; }

        [XmlAttribute("line", DataType = "integer")]
        public string line { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "staff-details")]
    public class StaffDetails
    {
        [XmlElement("staff-type")]
        public StaffType stafftype { get; set; }

        [XmlIgnore]
        public bool stafftypeSpecified { get; set; }

        [XmlElement("staff-lines", DataType = "nonNegativeInteger")]
        public string stafflines { get; set; }

        [XmlElement("staff-tuning")]
        public StaffTuning[] stafftuning { get; set; }

        [XmlElement("capo", DataType = "nonNegativeInteger")]
        public string capo { get; set; }

        [XmlElement("staff-size")]
        public decimal staffsize { get; set; }

        [XmlIgnore]
        public bool staffsizeSpecified { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("show-frets")]
        public ShowFrets showfrets { get; set; }

        [XmlIgnore]
        public bool showfretsSpecified { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlAttribute("print-spacing")]
        public YesNo printspacing { get; set; }

        [XmlIgnore]
        public bool printspacingSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "staff-type")]
    public enum StaffType
    {
        [XmlEnum("ossia")]
        Ossia,

        [XmlEnum("cue")]
        Cue,

        [XmlEnum("editorial")]
        Editorial,

        [XmlEnum("regular")]
        Regular,

        [XmlEnum("alternate")]
        Alternate,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "show-frets")]
    public enum ShowFrets
    {
        [XmlEnum("numbers")]
        Numbers,

        [XmlEnum("letters")]
        Letters,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("clef")]
    public class Clef
    {
        [XmlElement("sign")]
        public ClefSign sign { get; set; }

        [XmlElement("line", DataType = "integer")]
        public string line { get; set; }

        [XmlElement("clef-octave-change", DataType = "integer")]
        public string clefoctavechange { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("additional")]
        public YesNo additional { get; set; }

        [XmlIgnore]
        public bool additionalSpecified { get; set; }

        [XmlAttribute("size")]
        public SymbolSize size { get; set; }

        [XmlIgnore]
        public bool sizeSpecified { get; set; }

        [XmlAttribute("after-barline")]
        public YesNo afterbarline { get; set; }

        [XmlIgnore]
        public bool afterbarlineSpecified { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "clef-sign")]
    public enum ClefSign
    {
        G,

        F,

        C,

        [XmlEnum("percussion")]
        Percussion,

        TAB,

        [XmlEnum("jianpu")]
        Jianpu,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "part-symbol")]
    public class PartSymbol
    {
        [XmlAttribute("top-staff", DataType = "positiveInteger")]
        public string topstaff { get; set; }

        [XmlAttribute("bottom-staff", DataType = "positiveInteger")]
        public string bottomstaff { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public GroupSymbolValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "group-symbol-value")]
    public enum GroupSymbolValue
    {
        [XmlEnum("none")]
        None,

        [XmlEnum("brace")]
        Brace,

        [XmlEnum("line")]
        Line,

        [XmlEnum("bracket")]
        Bracket,

        [XmlEnum("square")]
        Square,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("interchangeable")]
    public class Interchangeable
    {
        [XmlElement("time-relation")]
        public TimeRelation timerelation { get; set; }

        [XmlIgnore]
        public bool timerelationSpecified { get; set; }

        [XmlElement("beats")]
        public string[] beats { get; set; }

        [XmlElement("beat-type")]
        public string[] beattype { get; set; }

        [XmlAttribute("symbol")]
        public TimeSymbol symbol { get; set; }

        [XmlIgnore]
        public bool symbolSpecified { get; set; }

        [XmlAttribute("separator")]
        public TimeSeparator separator { get; set; }

        [XmlIgnore]
        public bool separatorSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "time-relation")]
    public enum TimeRelation
    {
        [XmlEnum("parentheses")]
        Parentheses,

        [XmlEnum("bracket")]
        Bracket,

        [XmlEnum("equals")]
        Equals,

        [XmlEnum("slash")]
        Slash,

        [XmlEnum("space")]
        Space,

        [XmlEnum("hyphen")]
        Hyphen,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "time-symbol")]
    public enum TimeSymbol
    {
        [XmlEnum("common")]
        Common,

        [XmlEnum("cut")]
        Cut,

        [XmlEnum("single-number")]
        SingleNumber,

        [XmlEnum("note")]
        Note,

        [XmlEnum("dotted-note")]
        DottedNote,

        [XmlEnum("normal")]
        Normal,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "time-separator")]
    public enum TimeSeparator
    {
        [XmlEnum("none")]
        None,

        [XmlEnum("horizontal")]
        Horizontal,

        [XmlEnum("diagonal")]
        Diagonal,

        [XmlEnum("vertical")]
        Vertical,

        [XmlEnum("adjacent")]
        Adjacent,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("time")]
    public class Time
    {
        [XmlElement("beat-type", typeof(string))]
        [XmlElement("beats", typeof(string))]
        [XmlElement("interchangeable", typeof(Interchangeable))]
        [XmlElement("senza-misura", typeof(string))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType9[] ItemsElementName { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("symbol")]
        public TimeSymbol symbol { get; set; }

        [XmlIgnore]
        public bool symbolSpecified { get; set; }

        [XmlAttribute("separator")]
        public TimeSeparator separator { get; set; }

        [XmlIgnore]
        public bool separatorSpecified { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType9
    {
        [XmlEnum("beat-type")]
        BeatType,

        [XmlEnum("beats")]
        Beats,

        [XmlEnum("interchangeable")]
        Interchangeable,

        [XmlEnum("senza-misura")]
        SenzaMisura,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "key-octave")]
    public class KeyOctave
    {
        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("cancel")]
        public YesNo cancel { get; set; }

        [XmlIgnore]
        public bool cancelSpecified { get; set; }

        [XmlText(DataType = "integer")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("cancel")]
    public class Cancel
    {
        [XmlAttribute("location")]
        public CancelLocation location { get; set; }

        [XmlIgnore]
        public bool locationSpecified { get; set; }

        [XmlText(DataType = "integer")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "cancel-location")]
    public enum CancelLocation
    {
        [XmlEnum("left")]
        Left,

        [XmlEnum("right")]
        Right,

        [XmlEnum("before-barline")]
        BeforeBarline,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("key")]
    public class Key
    {
        [XmlElement("cancel", typeof(Cancel))]
        [XmlElement("fifths", typeof(string), DataType = "integer")]
        [XmlElement("key-accidental", typeof(AccidentalValue))]
        [XmlElement("key-alter", typeof(decimal))]
        [XmlElement("key-step", typeof(Step))]
        [XmlElement("mode", typeof(string))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType8[] ItemsElementName { get; set; }

        [XmlElement("key-octave")]
        public KeyOctave[] keyoctave { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType8
    {
        [XmlEnum("cancel")]
        Cancel,

        [XmlEnum("fifths")]
        Fifths,

        [XmlEnum("key-accidental")]
        KeyAccidental,

        [XmlEnum("key-alter")]
        KeyAlter,

        [XmlEnum("key-step")]
        KeyStep,

        [XmlEnum("mode")]
        Mode,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("attributes")]
    public class Attributes
    {
        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlElement("divisions")]
        public decimal divisions { get; set; }

        [XmlIgnore]
        public bool divisionsSpecified { get; set; }

        [XmlElement("key")]
        public Key[] key { get; set; }

        [XmlElement("time")]
        public Time[] time { get; set; }

        [XmlElement("staves", DataType = "nonNegativeInteger")]
        public string staves { get; set; }

        [XmlElement("part-symbol")]
        public PartSymbol partsymbol { get; set; }

        [XmlElement("instruments", DataType = "nonNegativeInteger")]
        public string instruments { get; set; }

        [XmlElement("clef")]
        public Clef[] clef { get; set; }

        [XmlElement("staff-details")]
        public StaffDetails[] staffdetails { get; set; }

        [XmlElement("transpose")]
        public Transpose[] transpose { get; set; }

        [XmlElement("directive")]
        public AttributesDirective[] directive { get; set; }

        [XmlElement("measure-style")]
        public MeasureStyle[] measurestyle { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "attributesDirective", AnonymousType = true)]
    public class AttributesDirective
    {
        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("sound")]
    public class Sound
    {
        [XmlElement("midi-device")]
        public MidiDevice[] mididevice { get; set; }

        [XmlElement("midi-instrument")]
        public MidiInstrument[] midiinstrument { get; set; }

        [XmlElement("play")]
        public Play[] play { get; set; }

        [XmlElement("offset")]
        public Offset offset { get; set; }

        [XmlAttribute("tempo")]
        public decimal tempo { get; set; }

        [XmlIgnore]
        public bool tempoSpecified { get; set; }

        [XmlAttribute("dynamics")]
        public decimal dynamics { get; set; }

        [XmlIgnore]
        public bool dynamicsSpecified { get; set; }

        [XmlAttribute("dacapo")]
        public YesNo dacapo { get; set; }

        [XmlIgnore]
        public bool dacapoSpecified { get; set; }

        [XmlAttribute("segno", DataType = "token")]
        public string segno { get; set; }

        [XmlAttribute("dalsegno", DataType = "token")]
        public string dalsegno { get; set; }

        [XmlAttribute("coda", DataType = "token")]
        public string coda { get; set; }

        [XmlAttribute("tocoda", DataType = "token")]
        public string tocoda { get; set; }

        [XmlAttribute("divisions")]
        public decimal divisions { get; set; }

        [XmlIgnore]
        public bool divisionsSpecified { get; set; }

        [XmlAttribute("forward-repeat")]
        public YesNo forwardrepeat { get; set; }

        [XmlIgnore]
        public bool forwardrepeatSpecified { get; set; }

        [XmlAttribute("fine", DataType = "token")]
        public string fine { get; set; }

        [XmlAttribute("time-only", DataType = "token")]
        public string timeonly { get; set; }

        [XmlAttribute("pizzicato")]
        public YesNo pizzicato { get; set; }

        [XmlIgnore]
        public bool pizzicatoSpecified { get; set; }

        [XmlAttribute("pan")]
        public decimal pan { get; set; }

        [XmlIgnore]
        public bool panSpecified { get; set; }

        [XmlAttribute("elevation")]
        public decimal elevation { get; set; }

        [XmlIgnore]
        public bool elevationSpecified { get; set; }

        [XmlAttribute("damper-pedal")]
        public string damperpedal { get; set; }

        [XmlAttribute("soft-pedal")]
        public string softpedal { get; set; }

        [XmlAttribute("sostenuto-pedal")]
        public string sostenutopedal { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "midi-device")]
    public class MidiDevice
    {
        [XmlAttribute("port", DataType = "positiveInteger")]
        public string port { get; set; }

        [XmlAttribute("id", DataType = "IDREF")]
        public string id { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "midi-instrument")]
    public class MidiInstrument
    {
        [XmlElement("midi-channel", DataType = "positiveInteger")]
        public string midichannel { get; set; }

        [XmlElement("midi-name")]
        public string midiname { get; set; }

        [XmlElement("midi-bank", DataType = "positiveInteger")]
        public string midibank { get; set; }

        [XmlElement("midi-program", DataType = "positiveInteger")]
        public string midiprogram { get; set; }

        [XmlElement("midi-unpitched", DataType = "positiveInteger")]
        public string midiunpitched { get; set; }

        [XmlElement("volume")]
        public decimal volume { get; set; }

        [XmlIgnore]
        public bool volumeSpecified { get; set; }

        [XmlElement("pan")]
        public decimal pan { get; set; }

        [XmlIgnore]
        public bool panSpecified { get; set; }

        [XmlElement("elevation")]
        public decimal elevation { get; set; }

        [XmlIgnore]
        public bool elevationSpecified { get; set; }

        [XmlAttribute("id", DataType = "IDREF")]
        public string id { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("play")]
    public class Play
    {
        [XmlElement("ipa", typeof(string))]
        [XmlElement("mute", typeof(Mute))]
        [XmlElement("other-play", typeof(OtherPlay))]
        [XmlElement("semi-pitched", typeof(SemiPitched))]
        public object[] Items { get; set; }

        [XmlAttribute("id", DataType = "IDREF")]
        public string id { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("mute")]
    public enum Mute
    {
        [XmlEnum("on")]
        On,

        [XmlEnum("off")]
        Off,

        [XmlEnum("straight")]
        Straight,

        [XmlEnum("cup")]
        Cup,

        [XmlEnum("harmon-no-stem")]
        HarmonNoStem,

        [XmlEnum("harmon-stem")]
        HarmonStem,

        [XmlEnum("bucket")]
        Bucket,

        [XmlEnum("plunger")]
        Plunger,

        [XmlEnum("hat")]
        Hat,

        [XmlEnum("solotone")]
        Solotone,

        [XmlEnum("practice")]
        Practice,

        [XmlEnum("stop-mute")]
        StopMute,

        [XmlEnum("stop-hand")]
        StopHand,

        [XmlEnum("echo")]
        Echo,

        [XmlEnum("palm")]
        Palm,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "other-play")]
    public class OtherPlay
    {
        [XmlAttribute("type", DataType = "token")]
        public string type { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "semi-pitched")]
    public enum SemiPitched
    {
        [XmlEnum("high")]
        High,

        [XmlEnum("medium-high")]
        MediumHigh,

        [XmlEnum("medium")]
        Medium,

        [XmlEnum("medium-low")]
        MediumLow,

        [XmlEnum("low")]
        Low,

        [XmlEnum("very-low")]
        VeryLow,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "other-direction")]
    public class OtherDirection
    {
        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("stick")]
    public class Stick
    {
        [XmlElement("stick-type")]
        public StickType sticktype { get; set; }

        [XmlElement("stick-material")]
        public StickMaterial stickmaterial { get; set; }

        [XmlAttribute("tip")]
        public TipDirection tip { get; set; }

        [XmlIgnore]
        public bool tipSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "stick-type")]
    public enum StickType
    {
        [XmlEnum("bass drum")]
        BassDrum,

        [XmlEnum("double bass drum")]
        DoubleBassDrum,

        [XmlEnum("timpani")]
        Timpani,

        [XmlEnum("xylophone")]
        Xylophone,

        [XmlEnum("yarn")]
        Yarn,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "stick-material")]
    public enum StickMaterial
    {
        [XmlEnum("soft")]
        Soft,

        [XmlEnum("medium")]
        Medium,

        [XmlEnum("hard")]
        Hard,

        [XmlEnum("shaded")]
        Shaded,

        [XmlEnum("x")]
        X,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "tip-direction")]
    public enum TipDirection
    {
        [XmlEnum("up")]
        Up,

        [XmlEnum("down")]
        Down,

        [XmlEnum("left")]
        Left,

        [XmlEnum("right")]
        Right,

        [XmlEnum("northwest")]
        Northwest,

        [XmlEnum("northeast")]
        Northeast,

        [XmlEnum("southeast")]
        Southeast,

        [XmlEnum("southwest")]
        Southwest,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("beater")]
    public class Beater
    {
        [XmlAttribute("tip")]
        public TipDirection tip { get; set; }

        [XmlIgnore]
        public bool tipSpecified { get; set; }

        [XmlText]
        public BeaterValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "beater-value")]
    public enum BeaterValue
    {
        [XmlEnum("bow")]
        Bow,

        [XmlEnum("chime hammer")]
        ChimeHammer,

        [XmlEnum("coin")]
        Coin,

        [XmlEnum("finger")]
        Finger,

        [XmlEnum("fingernail")]
        Fingernail,

        [XmlEnum("fist")]
        Fist,

        [XmlEnum("guiro scraper")]
        GuiroScraper,

        [XmlEnum("hammer")]
        Hammer,

        [XmlEnum("hand")]
        Hand,

        [XmlEnum("jazz stick")]
        JazzStick,

        [XmlEnum("knitting needle")]
        KnittingNeedle,

        [XmlEnum("metal hammer")]
        MetalHammer,

        [XmlEnum("snare stick")]
        SnareStick,

        [XmlEnum("spoon mallet")]
        SpoonMallet,

        [XmlEnum("triangle beater")]
        TriangleBeater,

        [XmlEnum("triangle beater plain")]
        TriangleBeaterPlain,

        [XmlEnum("wire brush")]
        WireBrush,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("percussion")]
    public class Percussion
    {
        [XmlElement("beater", typeof(Beater))]
        [XmlElement("effect", typeof(Effect))]
        [XmlElement("glass", typeof(Glass))]
        [XmlElement("membrane", typeof(Membrane))]
        [XmlElement("metal", typeof(Metal))]
        [XmlElement("other-percussion", typeof(string))]
        [XmlElement("pitched", typeof(Pitched))]
        [XmlElement("stick", typeof(Stick))]
        [XmlElement("stick-location", typeof(StickLocation))]
        [XmlElement("timpani", typeof(Empty))]
        [XmlElement("wood", typeof(Wood))]
        public object Item { get; set; }

        [XmlAttribute("enclosure")]
        public EnclosureShape enclosure { get; set; }

        [XmlIgnore]
        public bool enclosureSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("effect")]
    public enum Effect
    {
        [XmlEnum("anvil")]
        Anvil,

        [XmlEnum("auto horn")]
        AutoHorn,

        [XmlEnum("bird whistle")]
        BirdWhistle,

        [XmlEnum("cannon")]
        Cannon,

        [XmlEnum("duck call")]
        DuckCall,

        [XmlEnum("gun shot")]
        GunShot,

        [XmlEnum("klaxon horn")]
        KlaxonHorn,

        [XmlEnum("lions roar")]
        LionsRoar,

        [XmlEnum("police whistle")]
        PoliceWhistle,

        [XmlEnum("siren")]
        Siren,

        [XmlEnum("slide whistle")]
        SlideWhistle,

        [XmlEnum("thunder sheet")]
        ThunderSheet,

        [XmlEnum("wind machine")]
        WindMachine,

        [XmlEnum("wind whistle")]
        WindWhistle,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("glass")]
    public enum Glass
    {
        [XmlEnum("wind chimes")]
        WindChimes,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("membrane")]
    public enum Membrane
    {
        [XmlEnum("bass drum")]
        BassDrum,

        [XmlEnum("bass drum on side")]
        BassDrumOnSide,

        [XmlEnum("bongos")]
        Bongos,

        [XmlEnum("conga drum")]
        CongaDrum,

        [XmlEnum("goblet drum")]
        GobletDrum,

        [XmlEnum("military drum")]
        MilitaryDrum,

        [XmlEnum("snare drum")]
        SnareDrum,

        [XmlEnum("snare drum snares off")]
        SnareDrumSnaresOff,

        [XmlEnum("tambourine")]
        Tambourine,

        [XmlEnum("tenor drum")]
        TenorDrum,

        [XmlEnum("timbales")]
        Timbales,

        [XmlEnum("tomtom")]
        Tomtom,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("metal")]
    public enum Metal
    {
        [XmlEnum("almglocken")]
        Almglocken,

        [XmlEnum("bell")]
        Bell,

        [XmlEnum("bell plate")]
        BellPlate,

        [XmlEnum("brake drum")]
        BrakeDrum,

        [XmlEnum("Chinese cymbal")]
        Chinesecymbal,

        [XmlEnum("cowbell")]
        Cowbell,

        [XmlEnum("crash cymbals")]
        CrashCymbals,

        [XmlEnum("crotale")]
        Crotale,

        [XmlEnum("cymbal tongs")]
        CymbalTongs,

        [XmlEnum("domed gong")]
        DomedGong,

        [XmlEnum("finger cymbals")]
        FingerCymbals,

        [XmlEnum("flexatone")]
        Flexatone,

        [XmlEnum("gong")]
        Gong,

        [XmlEnum("hi-hat")]
        HiHat,

        [XmlEnum("high-hat cymbals")]
        HighHatCymbals,

        [XmlEnum("handbell")]
        Handbell,

        [XmlEnum("sistrum")]
        Sistrum,

        [XmlEnum("sizzle cymbal")]
        SizzleCymbal,

        [XmlEnum("sleigh bells")]
        SleighBells,

        [XmlEnum("suspended cymbal")]
        SuspendedCymbal,

        [XmlEnum("tam tam")]
        TamTam,

        [XmlEnum("triangle")]
        Triangle,

        [XmlEnum("Vietnamese hat")]
        Vietnamesehat,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("pitched")]
    public enum Pitched
    {
        [XmlEnum("chimes")]
        Chimes,

        [XmlEnum("glockenspiel")]
        Glockenspiel,

        [XmlEnum("mallet")]
        Mallet,

        [XmlEnum("marimba")]
        Marimba,

        [XmlEnum("tubular chimes")]
        TubularChimes,

        [XmlEnum("vibraphone")]
        Vibraphone,

        [XmlEnum("xylophone")]
        Xylophone,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "stick-location")]
    public enum StickLocation
    {
        [XmlEnum("center")]
        Center,

        [XmlEnum("rim")]
        Rim,

        [XmlEnum("cymbal bell")]
        CymbalBell,

        [XmlEnum("cymbal edge")]
        CymbalEdge,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("wood")]
    public enum Wood
    {
        [XmlEnum("board clapper")]
        BoardClapper,

        [XmlEnum("cabasa")]
        Cabasa,

        [XmlEnum("castanets")]
        Castanets,

        [XmlEnum("claves")]
        Claves,

        [XmlEnum("guiro")]
        Guiro,

        [XmlEnum("log drum")]
        LogDrum,

        [XmlEnum("maraca")]
        Maraca,

        [XmlEnum("maracas")]
        Maracas,

        [XmlEnum("ratchet")]
        Ratchet,

        [XmlEnum("sandpaper blocks")]
        SandpaperBlocks,

        [XmlEnum("slit drum")]
        SlitDrum,

        [XmlEnum("temple block")]
        TempleBlock,

        [XmlEnum("vibraslap")]
        Vibraslap,

        [XmlEnum("wood block")]
        WoodBlock,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "enclosure-shape")]
    public enum EnclosureShape
    {
        [XmlEnum("rectangle")]
        Rectangle,

        [XmlEnum("square")]
        Square,

        [XmlEnum("oval")]
        Oval,

        [XmlEnum("circle")]
        Circle,

        [XmlEnum("bracket")]
        Bracket,

        [XmlEnum("triangle")]
        Triangle,

        [XmlEnum("diamond")]
        Diamond,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "accordion-registration")]
    public class AccordionRegistration
    {
        [XmlElement("accordion-high")]
        public Empty accordionhigh { get; set; }

        [XmlElement("accordion-middle", DataType = "positiveInteger")]
        public string accordionmiddle { get; set; }

        [XmlElement("accordion-low")]
        public Empty accordionlow { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "principal-voice")]
    public class PrincipalVoice
    {
        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("symbol")]
        public PrincipalVoiceSymbol symbol { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "principal-voice-symbol")]
    public enum PrincipalVoiceSymbol
    {
        [XmlEnum("Hauptstimme")]
        Hauptstimme,

        [XmlEnum("Nebenstimme")]
        Nebenstimme,

        [XmlEnum("plain")]
        Plain,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("scordatura")]
    public class Scordatura
    {
        [XmlElement("accord")]
        public Accord[] accord { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("accord")]
    public class Accord
    {
        [XmlElement("tuning-step")]
        public Step tuningstep { get; set; }

        [XmlElement("tuning-alter")]
        public decimal tuningalter { get; set; }

        [XmlIgnore]
        public bool tuningalterSpecified { get; set; }

        [XmlElement("tuning-octave", DataType = "integer")]
        public string tuningoctave { get; set; }

        [XmlAttribute("string", DataType = "positiveInteger")]
        public string @string { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "string-mute")]
    public class StringMute
    {
        [XmlAttribute("type")]
        public OnOff type { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "on-off")]
    public enum OnOff
    {
        [XmlEnum("on")]
        On,

        [XmlEnum("off")]
        Off,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "pedal-tuning")]
    public class PedalTuning
    {
        [XmlElement("pedal-step")]
        public Step pedalstep { get; set; }

        [XmlElement("pedal-alter")]
        public decimal pedalalter { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "harp-pedals")]
    public class HarpPedals
    {
        [XmlElement("pedal-tuning")]
        public PedalTuning[] pedaltuning { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "octave-shift")]
    public class OctaveShift
    {
        public OctaveShift()
        {
            this.size = "8";
        }

        [XmlAttribute("type")]
        public UpDownStopContinue type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("8")]
        public string size { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "up-down-stop-continue")]
    public enum UpDownStopContinue
    {
        [XmlEnum("up")]
        Up,

        [XmlEnum("down")]
        Down,

        [XmlEnum("stop")]
        Stop,

        [XmlEnum("continue")]
        Continue,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "metronome-beam")]
    public class MetronomeBeam
    {
        public MetronomeBeam()
        {
            this.number = "1";
        }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlText]
        public BeamValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "beam-value")]
    public enum BeamValue
    {
        [XmlEnum("begin")]
        Begin,

        [XmlEnum("continue")]
        Continue,

        [XmlEnum("end")]
        End,

        [XmlEnum("forward hook")]
        ForwardHook,

        [XmlEnum("backward hook")]
        BackwardHook,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "metronome-note")]
    public class MetronomeNote
    {
        [XmlElement("metronome-type")]
        public NoteTypeValue metronometype { get; set; }

        [XmlElement("metronome-dot")]
        public Empty[] metronomedot { get; set; }

        [XmlElement("metronome-beam")]
        public MetronomeBeam[] metronomebeam { get; set; }

        [XmlElement("metronome-tuplet")]
        public MetronomeTuplet metronometuplet { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "metronome-tuplet")]
    public class MetronomeTuplet : TimeModification
    {
        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("bracket")]
        public YesNo bracket { get; set; }

        [XmlIgnore]
        public bool bracketSpecified { get; set; }

        [XmlAttribute("show-number")]
        public ShowTuplet shownumber { get; set; }

        [XmlIgnore]
        public bool shownumberSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "show-tuplet")]
    public enum ShowTuplet
    {
        [XmlEnum("actual")]
        Actual,

        [XmlEnum("both")]
        Both,

        [XmlEnum("none")]
        None,
    }

    [XmlInclude(typeof(MetronomeTuplet))]
    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "time-modification")]
    public class TimeModification
    {
        [XmlElement("actual-notes", DataType = "nonNegativeInteger")]
        public string actualnotes { get; set; }

        [XmlElement("normal-notes", DataType = "nonNegativeInteger")]
        public string normalnotes { get; set; }

        [XmlElement("normal-type")]
        public NoteTypeValue normaltype { get; set; }

        [XmlElement("normal-dot")]
        public Empty[] normaldot { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "per-minute")]
    public class PerMinute
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("metronome")]
    public class Metronome
    {
        [XmlElement("beat-unit", typeof(NoteTypeValue))]
        [XmlElement("beat-unit-dot", typeof(Empty))]
        [XmlElement("metronome-note", typeof(MetronomeNote))]
        [XmlElement("metronome-relation", typeof(string))]
        [XmlElement("per-minute", typeof(PerMinute))]
        public object[] Items { get; set; }

        [XmlAttribute("justify")]
        public LeftCenterRight justify { get; set; }

        [XmlIgnore]
        public bool justifySpecified { get; set; }

        [XmlAttribute("parentheses")]
        public YesNo parentheses { get; set; }

        [XmlIgnore]
        public bool parenthesesSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("pedal")]
    public class Pedal
    {
        [XmlAttribute("type")]
        public StartStopChangeContinue type { get; set; }

        [XmlAttribute("line")]
        public YesNo line { get; set; }

        [XmlIgnore]
        public bool lineSpecified { get; set; }

        [XmlAttribute("sign")]
        public YesNo sign { get; set; }

        [XmlIgnore]
        public bool signSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "start-stop-change-continue")]
    public enum StartStopChangeContinue
    {
        [XmlEnum("start")]
        Start,

        [XmlEnum("stop")]
        Stop,

        [XmlEnum("change")]
        Change,

        [XmlEnum("continue")]
        Continue,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("bracket")]
    public class Bracket
    {
        [XmlAttribute("type")]
        public StartStopContinue type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("line-end")]
        public LineEnd lineend { get; set; }

        [XmlAttribute("end-length")]
        public decimal endlength { get; set; }

        [XmlIgnore]
        public bool endlengthSpecified { get; set; }

        [XmlAttribute("line-type")]
        public LineType linetype { get; set; }

        [XmlIgnore]
        public bool linetypeSpecified { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "line-end")]
    public enum LineEnd
    {
        [XmlEnum("up")]
        Up,

        [XmlEnum("down")]
        Down,

        [XmlEnum("both")]
        Both,

        [XmlEnum("arrow")]
        Arrow,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "line-type")]
    public enum LineType
    {
        [XmlEnum("solid")]
        Solid,

        [XmlEnum("dashed")]
        Dashed,

        [XmlEnum("dotted")]
        Dotted,

        [XmlEnum("wavy")]
        Wavy,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("dashes")]
    public class Dashes
    {
        [XmlAttribute("type")]
        public StartStopContinue type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("wedge")]
    public class Wedge
    {
        [XmlAttribute("type")]
        public WedgeType type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("spread")]
        public decimal spread { get; set; }

        [XmlIgnore]
        public bool spreadSpecified { get; set; }

        [XmlAttribute("niente")]
        public YesNo niente { get; set; }

        [XmlIgnore]
        public bool nienteSpecified { get; set; }

        [XmlAttribute("line-type")]
        public LineType linetype { get; set; }

        [XmlIgnore]
        public bool linetypeSpecified { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "wedge-type")]
    public enum WedgeType
    {
        [XmlEnum("crescendo")]
        Crescendo,

        [XmlEnum("diminuendo")]
        Diminuendo,

        [XmlEnum("stop")]
        Stop,

        [XmlEnum("continue")]
        Continue,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "direction-type")]
    public class DirectionType
    {
        [XmlElement("accordion-registration", typeof(AccordionRegistration))]
        [XmlElement("bracket", typeof(Bracket))]
        [XmlElement("coda", typeof(EmptyPrintStyleAlign))]
        [XmlElement("damp", typeof(EmptyPrintStyleAlign))]
        [XmlElement("damp-all", typeof(EmptyPrintStyleAlign))]
        [XmlElement("dashes", typeof(Dashes))]
        [XmlElement("dynamics", typeof(Dynamics))]
        [XmlElement("eyeglasses", typeof(EmptyPrintStyleAlign))]
        [XmlElement("harp-pedals", typeof(HarpPedals))]
        [XmlElement("image", typeof(Image))]
        [XmlElement("metronome", typeof(Metronome))]
        [XmlElement("octave-shift", typeof(OctaveShift))]
        [XmlElement("other-direction", typeof(OtherDirection))]
        [XmlElement("pedal", typeof(Pedal))]
        [XmlElement("percussion", typeof(Percussion))]
        [XmlElement("principal-voice", typeof(PrincipalVoice))]
        [XmlElement("rehearsal", typeof(FormattedText))]
        [XmlElement("scordatura", typeof(Scordatura))]
        [XmlElement("segno", typeof(EmptyPrintStyleAlign))]
        [XmlElement("string-mute", typeof(StringMute))]
        [XmlElement("wedge", typeof(Wedge))]
        [XmlElement("words", typeof(FormattedText))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType7[] ItemsElementName { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("dynamics")]
    public class Dynamics
    {
        [XmlElement("f", typeof(Empty))]
        [XmlElement("ff", typeof(Empty))]
        [XmlElement("fff", typeof(Empty))]
        [XmlElement("ffff", typeof(Empty))]
        [XmlElement("fffff", typeof(Empty))]
        [XmlElement("ffffff", typeof(Empty))]
        [XmlElement("fp", typeof(Empty))]
        [XmlElement("fz", typeof(Empty))]
        [XmlElement("mf", typeof(Empty))]
        [XmlElement("mp", typeof(Empty))]
        [XmlElement("other-dynamics", typeof(string))]
        [XmlElement("p", typeof(Empty))]
        [XmlElement("pp", typeof(Empty))]
        [XmlElement("ppp", typeof(Empty))]
        [XmlElement("pppp", typeof(Empty))]
        [XmlElement("ppppp", typeof(Empty))]
        [XmlElement("pppppp", typeof(Empty))]
        [XmlElement("rf", typeof(Empty))]
        [XmlElement("rfz", typeof(Empty))]
        [XmlElement("sf", typeof(Empty))]
        [XmlElement("sffz", typeof(Empty))]
        [XmlElement("sfp", typeof(Empty))]
        [XmlElement("sfpp", typeof(Empty))]
        [XmlElement("sfz", typeof(Empty))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType5[] ItemsElementName { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("underline", DataType = "nonNegativeInteger")]
        public string underline { get; set; }

        [XmlAttribute("overline", DataType = "nonNegativeInteger")]
        public string overline { get; set; }

        [XmlAttribute("line-through", DataType = "nonNegativeInteger")]
        public string linethrough { get; set; }

        [XmlAttribute("enclosure")]
        public EnclosureShape enclosure { get; set; }

        [XmlIgnore]
        public bool enclosureSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType5
    {
        [XmlEnum("f")]
        F,

        [XmlEnum("ff")]
        Ff,

        [XmlEnum("fff")]
        Fff,

        [XmlEnum("ffff")]
        Ffff,

        [XmlEnum("fffff")]
        Fffff,

        [XmlEnum("ffffff")]
        Ffffff,

        [XmlEnum("fp")]
        Fp,

        [XmlEnum("fz")]
        Fz,

        [XmlEnum("mf")]
        Mf,

        [XmlEnum("mp")]
        Mp,

        [XmlEnum("other-dynamics")]
        OtherDynamics,

        [XmlEnum("p")]
        P,

        [XmlEnum("pp")]
        Pp,

        [XmlEnum("ppp")]
        Ppp,

        [XmlEnum("pppp")]
        Pppp,

        [XmlEnum("ppppp")]
        Ppppp,

        [XmlEnum("pppppp")]
        Pppppp,

        [XmlEnum("rf")]
        Rf,

        [XmlEnum("rfz")]
        Rfz,

        [XmlEnum("sf")]
        Sf,

        [XmlEnum("sffz")]
        Sffz,

        [XmlEnum("sfp")]
        Sfp,

        [XmlEnum("sfpp")]
        Sfpp,

        [XmlEnum("sfz")]
        Sfz,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("image")]
    public class Image
    {
        [XmlAttribute("source", DataType = "anyURI")]
        public string source { get; set; }

        [XmlAttribute("type", DataType = "token")]
        public string type { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType7
    {
        [XmlEnum("accordion-registration")]
        AccordionRegistration,

        [XmlEnum("bracket")]
        Bracket,

        [XmlEnum("coda")]
        Coda,

        [XmlEnum("damp")]
        Damp,

        [XmlEnum("damp-all")]
        DampAll,

        [XmlEnum("dashes")]
        Dashes,

        [XmlEnum("dynamics")]
        Dynamics,

        [XmlEnum("eyeglasses")]
        Eyeglasses,

        [XmlEnum("harp-pedals")]
        HarpPedals,

        [XmlEnum("image")]
        Image,

        [XmlEnum("metronome")]
        Metronome,

        [XmlEnum("octave-shift")]
        OctaveShift,

        [XmlEnum("other-direction")]
        OtherDirection,

        [XmlEnum("pedal")]
        Pedal,

        [XmlEnum("percussion")]
        Percussion,

        [XmlEnum("principal-voice")]
        PrincipalVoice,

        [XmlEnum("rehearsal")]
        Rehearsal,

        [XmlEnum("scordatura")]
        Scordatura,

        [XmlEnum("segno")]
        Segno,

        [XmlEnum("string-mute")]
        StringMute,

        [XmlEnum("wedge")]
        Wedge,

        [XmlEnum("words")]
        Words,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("direction")]
    public class Direction
    {
        [XmlElement("direction-type")]
        public DirectionType[] directiontype { get; set; }

        [XmlElement("offset")]
        public Offset offset { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlElement("voice")]
        public string voice { get; set; }

        [XmlElement("staff", DataType = "positiveInteger")]
        public string staff { get; set; }

        [XmlElement("sound")]
        public Sound sound { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("directive")]
        public YesNo directive { get; set; }

        [XmlIgnore]
        public bool directiveSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("forward")]
    public class Forward
    {
        [XmlElement("duration")]
        public decimal duration { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlElement("voice")]
        public string voice { get; set; }

        [XmlElement("staff", DataType = "positiveInteger")]
        public string staff { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("backup")]
    public class Backup
    {
        [XmlElement("duration")]
        public decimal duration { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "text-font-color")]
    public class TextFontColor
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlAttribute("underline", DataType = "nonNegativeInteger")]
        public string underline { get; set; }

        [XmlAttribute("overline", DataType = "nonNegativeInteger")]
        public string overline { get; set; }

        [XmlAttribute("line-through", DataType = "nonNegativeInteger")]
        public string linethrough { get; set; }

        [XmlAttribute("rotation")]
        public decimal rotation { get; set; }

        [XmlIgnore]
        public bool rotationSpecified { get; set; }

        [XmlAttribute("letter-spacing")]
        public string letterspacing { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang { get; set; }

        [XmlAttribute("dir")]
        public TextDirection dir { get; set; }

        [XmlIgnore]
        public bool dirSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "text-direction")]
    public enum TextDirection
    {
        [XmlEnum("ltr")]
        Ltr,

        [XmlEnum("rtl")]
        Rtl,

        [XmlEnum("lro")]
        Lro,

        [XmlEnum("rlo")]
        Rlo,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "text-element-data")]
    public class TextElementData
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlAttribute("underline", DataType = "nonNegativeInteger")]
        public string underline { get; set; }

        [XmlAttribute("overline", DataType = "nonNegativeInteger")]
        public string overline { get; set; }

        [XmlAttribute("line-through", DataType = "nonNegativeInteger")]
        public string linethrough { get; set; }

        [XmlAttribute("rotation")]
        public decimal rotation { get; set; }

        [XmlIgnore]
        public bool rotationSpecified { get; set; }

        [XmlAttribute("letter-spacing")]
        public string letterspacing { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang { get; set; }

        [XmlAttribute("dir")]
        public TextDirection dir { get; set; }

        [XmlIgnore]
        public bool dirSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("lyric")]
    public class Lyric
    {
        [XmlElement("elision", typeof(TextFontColor))]
        [XmlElement("extend", typeof(Extend))]
        [XmlElement("humming", typeof(Empty))]
        [XmlElement("laughing", typeof(Empty))]
        [XmlElement("syllabic", typeof(Syllabic))]
        [XmlElement("text", typeof(TextElementData))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType6[] ItemsElementName { get; set; }

        [XmlElement("end-line")]
        public Empty endline { get; set; }

        [XmlElement("end-paragraph")]
        public Empty endparagraph { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlAttribute("number", DataType = "NMTOKEN")]
        public string number { get; set; }

        [XmlAttribute("name", DataType = "token")]
        public string name { get; set; }

        [XmlAttribute("justify")]
        public LeftCenterRight justify { get; set; }

        [XmlIgnore]
        public bool justifySpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("syllabic")]
    public enum Syllabic
    {
        [XmlEnum("single")]
        Single,

        [XmlEnum("begin")]
        Begin,

        [XmlEnum("end")]
        End,

        [XmlEnum("middle")]
        Middle,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType6
    {
        [XmlEnum("elision")]
        Elision,

        [XmlEnum("extend")]
        Extend,

        [XmlEnum("humming")]
        Humming,

        [XmlEnum("laughing")]
        Laughing,

        [XmlEnum("syllabic")]
        Syllabic,

        [XmlEnum("text")]
        Text,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "other-notation")]
    public class OtherNotation
    {
        public OtherNotation()
        {
            this.number = "1";
        }

        [XmlAttribute("type")]
        public StartStopSingle type { get; set; }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "non-arpeggiate")]
    public class NonArpeggiate
    {
        [XmlAttribute("type")]
        public TopBottom type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "top-bottom")]
    public enum TopBottom
    {
        [XmlEnum("top")]
        Top,

        [XmlEnum("bottom")]
        Bottom,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("arpeggiate")]
    public class Arpeggiate
    {
        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("direction")]
        public UpDown direction { get; set; }

        [XmlIgnore]
        public bool directionSpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "up-down")]
    public enum UpDown
    {
        [XmlEnum("up")]
        Up,

        [XmlEnum("down")]
        Down,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("articulations")]
    public class Articulations
    {
        [XmlElement("accent", typeof(EmptyPlacement))]
        [XmlElement("breath-mark", typeof(BreathMark))]
        [XmlElement("caesura", typeof(EmptyPlacement))]
        [XmlElement("detached-legato", typeof(EmptyPlacement))]
        [XmlElement("doit", typeof(EmptyLine))]
        [XmlElement("falloff", typeof(EmptyLine))]
        [XmlElement("other-articulation", typeof(PlacementText))]
        [XmlElement("plop", typeof(EmptyLine))]
        [XmlElement("scoop", typeof(EmptyLine))]
        [XmlElement("spiccato", typeof(EmptyPlacement))]
        [XmlElement("staccatissimo", typeof(EmptyPlacement))]
        [XmlElement("staccato", typeof(EmptyPlacement))]
        [XmlElement("stress", typeof(EmptyPlacement))]
        [XmlElement("strong-accent", typeof(StrongAccent))]
        [XmlElement("tenuto", typeof(EmptyPlacement))]
        [XmlElement("unstress", typeof(EmptyPlacement))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType4[] ItemsElementName { get; set; }
    }

    [XmlInclude(typeof(StrongAccent))]
    [XmlInclude(typeof(HeelToe))]
    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "empty-placement")]
    public class EmptyPlacement
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "strong-accent")]
    public class StrongAccent : EmptyPlacement
    {
        public StrongAccent()
        {
            this.type = UpDown.Up;
        }

        [XmlAttribute("type")]
        [DefaultValue(UpDown.Up)]
        public UpDown type { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "heel-toe")]
    public class HeelToe : EmptyPlacement
    {
        [XmlAttribute("substitution")]
        public YesNo substitution { get; set; }

        [XmlIgnore]
        public bool substitutionSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "breath-mark")]
    public class BreathMark
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText]
        public BreathMarkValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "breath-mark-value")]
    public enum BreathMarkValue
    {
        [XmlEnum("")]
        Item,

        [XmlEnum("comma")]
        Comma,

        [XmlEnum("tick")]
        Tick,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "empty-line")]
    public class EmptyLine
    {
        [XmlAttribute("line-shape")]
        public LineShape lineshape { get; set; }

        [XmlIgnore]
        public bool lineshapeSpecified { get; set; }

        [XmlAttribute("line-type")]
        public LineType linetype { get; set; }

        [XmlIgnore]
        public bool linetypeSpecified { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "line-shape")]
    public enum LineShape
    {
        [XmlEnum("straight")]
        Straight,

        [XmlEnum("curved")]
        Curved,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "placement-text")]
    public class PlacementText
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType4
    {
        [XmlEnum("accent")]
        Accent,

        [XmlEnum("breath-mark")]
        BreathMark,

        [XmlEnum("caesura")]
        Caesura,

        [XmlEnum("detached-legato")]
        DetachedLegato,

        [XmlEnum("doit")]
        Doit,

        [XmlEnum("falloff")]
        Falloff,

        [XmlEnum("other-articulation")]
        OtherArticulation,

        [XmlEnum("plop")]
        Plop,

        [XmlEnum("scoop")]
        Scoop,

        [XmlEnum("spiccato")]
        Spiccato,

        [XmlEnum("staccatissimo")]
        Staccatissimo,

        [XmlEnum("staccato")]
        Staccato,

        [XmlEnum("stress")]
        Stress,

        [XmlEnum("strong-accent")]
        StrongAccent,

        [XmlEnum("tenuto")]
        Tenuto,

        [XmlEnum("unstress")]
        Unstress,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("technical")]
    public class Technical
    {
        [XmlElement("arrow", typeof(Arrow))]
        [XmlElement("bend", typeof(Bend))]
        [XmlElement("double-tongue", typeof(EmptyPlacement))]
        [XmlElement("down-bow", typeof(EmptyPlacement))]
        [XmlElement("fingering", typeof(Fingering))]
        [XmlElement("fingernails", typeof(EmptyPlacement))]
        [XmlElement("fret", typeof(Fret))]
        [XmlElement("hammer-on", typeof(HammerOnPullOff))]
        [XmlElement("handbell", typeof(Handbell))]
        [XmlElement("harmonic", typeof(Harmonic))]
        [XmlElement("heel", typeof(HeelToe))]
        [XmlElement("hole", typeof(Hole))]
        [XmlElement("open-string", typeof(EmptyPlacement))]
        [XmlElement("other-technical", typeof(PlacementText))]
        [XmlElement("pluck", typeof(PlacementText))]
        [XmlElement("pull-off", typeof(HammerOnPullOff))]
        [XmlElement("snap-pizzicato", typeof(EmptyPlacement))]
        [XmlElement("stopped", typeof(EmptyPlacement))]
        [XmlElement("string", typeof(String))]
        [XmlElement("tap", typeof(PlacementText))]
        [XmlElement("thumb-position", typeof(EmptyPlacement))]
        [XmlElement("toe", typeof(HeelToe))]
        [XmlElement("triple-tongue", typeof(EmptyPlacement))]
        [XmlElement("up-bow", typeof(EmptyPlacement))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType3[] ItemsElementName { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("arrow")]
    public class Arrow
    {
        [XmlElement("arrow-direction", typeof(ArrowDirection))]
        [XmlElement("arrow-style", typeof(ArrowStyle))]
        [XmlElement("circular-arrow", typeof(CircularArrow))]
        public object[] Items { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "arrow-direction")]
    public enum ArrowDirection
    {
        [XmlEnum("left")]
        Left,

        [XmlEnum("up")]
        Up,

        [XmlEnum("right")]
        Right,

        [XmlEnum("down")]
        Down,

        [XmlEnum("northwest")]
        Northwest,

        [XmlEnum("northeast")]
        Northeast,

        [XmlEnum("southeast")]
        Southeast,

        [XmlEnum("southwest")]
        Southwest,

        [XmlEnum("left right")]
        LeftRight,

        [XmlEnum("up down")]
        UpDown,

        [XmlEnum("northwest southeast")]
        NorthwestSoutheast,

        [XmlEnum("northeast southwest")]
        NortheastSouthwest,

        [XmlEnum("other")]
        Other,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "arrow-style")]
    public enum ArrowStyle
    {
        [XmlEnum("single")]
        Single,

        [XmlEnum("double")]
        Double,

        [XmlEnum("filled")]
        Filled,

        [XmlEnum("hollow")]
        Hollow,

        [XmlEnum("paired")]
        Paired,

        [XmlEnum("combined")]
        Combined,

        [XmlEnum("other")]
        Other,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "circular-arrow")]
    public enum CircularArrow
    {
        [XmlEnum("clockwise")]
        Clockwise,

        [XmlEnum("anticlockwise")]
        Anticlockwise,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("bend")]
    public class Bend
    {
        [XmlElement("bend-alter")]
        public decimal bendalter { get; set; }

        [XmlElement("pre-bend", typeof(Empty))]
        [XmlElement("release", typeof(Empty))]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public Empty Item { get; set; }

        [XmlIgnore]
        public ItemChoiceType1 ItemElementName { get; set; }

        [XmlElement("with-bar")]
        public PlacementText withbar { get; set; }

        [XmlAttribute("accelerate")]
        public YesNo accelerate { get; set; }

        [XmlIgnore]
        public bool accelerateSpecified { get; set; }

        [XmlAttribute("beats")]
        public decimal beats { get; set; }

        [XmlIgnore]
        public bool beatsSpecified { get; set; }

        [XmlAttribute("first-beat")]
        public decimal firstbeat { get; set; }

        [XmlIgnore]
        public bool firstbeatSpecified { get; set; }

        [XmlAttribute("last-beat")]
        public decimal lastbeat { get; set; }

        [XmlIgnore]
        public bool lastbeatSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemChoiceType1
    {
        [XmlEnum("pre-bend")]
        PreBend,

        [XmlEnum("release")]
        Release,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "hammer-on-pull-off")]
    public class HammerOnPullOff
    {
        public HammerOnPullOff()
        {
            this.number = "1";
        }

        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("handbell")]
    public class Handbell
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText]
        public HandbellValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "handbell-value")]
    public enum HandbellValue
    {
        [XmlEnum("damp")]
        Damp,

        [XmlEnum("echo")]
        Echo,

        [XmlEnum("gyro")]
        Gyro,

        [XmlEnum("hand martellato")]
        HandMartellato,

        [XmlEnum("mallet lift")]
        MalletLift,

        [XmlEnum("mallet table")]
        MalletTable,

        [XmlEnum("martellato")]
        Martellato,

        [XmlEnum("martellato lift")]
        MartellatoLift,

        [XmlEnum("muted martellato")]
        MutedMartellato,

        [XmlEnum("pluck lift")]
        PluckLift,

        [XmlEnum("swing")]
        Swing,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("harmonic")]
    public class Harmonic
    {
        [XmlElement("artificial", typeof(Empty))]
        [XmlElement("natural", typeof(Empty))]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public Empty Item { get; set; }

        [XmlIgnore]
        public ItemChoiceType ItemElementName { get; set; }

        [XmlElement("base-pitch", typeof(Empty))]
        [XmlElement("sounding-pitch", typeof(Empty))]
        [XmlElement("touching-pitch", typeof(Empty))]
        [XmlChoiceIdentifierAttribute("Item1ElementName")]
        public Empty Item1 { get; set; }

        [XmlIgnore]
        public Item1ChoiceType Item1ElementName { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemChoiceType
    {
        [XmlEnum("artificial")]
        Artificial,

        [XmlEnum("natural")]
        Natural,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum Item1ChoiceType
    {
        [XmlEnum("base-pitch")]
        BasePitch,

        [XmlEnum("sounding-pitch")]
        SoundingPitch,

        [XmlEnum("touching-pitch")]
        TouchingPitch,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("hole")]
    public class Hole
    {
        [XmlElement("hole-type")]
        public string holetype { get; set; }

        [XmlElement("hole-closed")]
        public HoleClosed holeclosed { get; set; }

        [XmlElement("hole-shape")]
        public string holeshape { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "hole-closed")]
    public class HoleClosed
    {
        [XmlAttribute("location")]
        public HoleClosedLocation location { get; set; }

        [XmlIgnore]
        public bool locationSpecified { get; set; }

        [XmlText]
        public HoleClosedValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "hole-closed-location")]
    public enum HoleClosedLocation
    {
        [XmlEnum("right")]
        Right,

        [XmlEnum("bottom")]
        Bottom,

        [XmlEnum("left")]
        Left,

        [XmlEnum("top")]
        Top,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "hole-closed-value")]
    public enum HoleClosedValue
    {
        [XmlEnum("yes")]
        Yes,

        [XmlEnum("no")]
        No,

        [XmlEnum("half")]
        Half,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType3
    {
        [XmlEnum("arrow")]
        Arrow,

        [XmlEnum("bend")]
        Bend,

        [XmlEnum("double-tongue")]
        DoubleTongue,

        [XmlEnum("down-bow")]
        DownBow,

        [XmlEnum("fingering")]
        Fingering,

        [XmlEnum("fingernails")]
        Fingernails,

        [XmlEnum("fret")]
        Fret,

        [XmlEnum("hammer-on")]
        HammerOn,

        [XmlEnum("handbell")]
        Handbell,

        [XmlEnum("harmonic")]
        Harmonic,

        [XmlEnum("heel")]
        Heel,

        [XmlEnum("hole")]
        Hole,

        [XmlEnum("open-string")]
        OpenString,

        [XmlEnum("other-technical")]
        OtherTechnical,

        [XmlEnum("pluck")]
        Pluck,

        [XmlEnum("pull-off")]
        PullOff,

        [XmlEnum("snap-pizzicato")]
        SnapPizzicato,

        [XmlEnum("stopped")]
        Stopped,

        [XmlEnum("string")]
        String,

        [XmlEnum("tap")]
        Tap,

        [XmlEnum("thumb-position")]
        ThumbPosition,

        [XmlEnum("toe")]
        Toe,

        [XmlEnum("triple-tongue")]
        TripleTongue,

        [XmlEnum("up-bow")]
        UpBow,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "accidental-mark")]
    public class AccidentalMark
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText]
        public AccidentalValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("tremolo")]
    public class Tremolo
    {
        public Tremolo()
        {
            this.type = StartStopSingle.Single;
        }

        [XmlAttribute("type")]
        [DefaultValue(StartStopSingle.Single)]
        public StartStopSingle type { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlText(DataType = "integer")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "horizontal-turn")]
    public class HorizontalTurn
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("start-note")]
        public StartNote startnote { get; set; }

        [XmlIgnore]
        public bool startnoteSpecified { get; set; }

        [XmlAttribute("trill-step")]
        public TrillStep trillstep { get; set; }

        [XmlIgnore]
        public bool trillstepSpecified { get; set; }

        [XmlAttribute("two-note-turn")]
        public TwoNoteTurn twonoteturn { get; set; }

        [XmlIgnore]
        public bool twonoteturnSpecified { get; set; }

        [XmlAttribute("accelerate")]
        public YesNo accelerate { get; set; }

        [XmlIgnore]
        public bool accelerateSpecified { get; set; }

        [XmlAttribute("beats")]
        public decimal beats { get; set; }

        [XmlIgnore]
        public bool beatsSpecified { get; set; }

        [XmlAttribute("second-beat")]
        public decimal secondbeat { get; set; }

        [XmlIgnore]
        public bool secondbeatSpecified { get; set; }

        [XmlAttribute("last-beat")]
        public decimal lastbeat { get; set; }

        [XmlIgnore]
        public bool lastbeatSpecified { get; set; }

        [XmlAttribute("slash")]
        public YesNo slash { get; set; }

        [XmlIgnore]
        public bool slashSpecified { get; set; }
    }

    [XmlIncludeAttribute(typeof(Mordent))]
    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "empty-trill-sound")]
    public class EmptyTrillSound
    {
        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("start-note")]
        public StartNote startnote { get; set; }

        [XmlIgnore]
        public bool startnoteSpecified { get; set; }

        [XmlAttribute("trill-step")]
        public TrillStep trillstep { get; set; }

        [XmlIgnore]
        public bool trillstepSpecified { get; set; }

        [XmlAttribute("two-note-turn")]
        public TwoNoteTurn twonoteturn { get; set; }

        [XmlIgnore]
        public bool twonoteturnSpecified { get; set; }

        [XmlAttribute("accelerate")]
        public YesNo accelerate { get; set; }

        [XmlIgnore]
        public bool accelerateSpecified { get; set; }

        [XmlAttribute("beats")]
        public decimal beats { get; set; }

        [XmlIgnore]
        public bool beatsSpecified { get; set; }

        [XmlAttribute("second-beat")]
        public decimal secondbeat { get; set; }

        [XmlIgnore]
        public bool secondbeatSpecified { get; set; }

        [XmlAttribute("last-beat")]
        public decimal lastbeat { get; set; }

        [XmlIgnore]
        public bool lastbeatSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("mordent")]
    public class Mordent : EmptyTrillSound
    {
        [XmlAttribute("long")]
        public YesNo @long { get; set; }

        [XmlIgnore]
        public bool longSpecified { get; set; }

        [XmlAttribute("approach")]
        public AboveBelow approach { get; set; }

        [XmlIgnore]
        public bool approachSpecified { get; set; }

        [XmlAttribute("departure")]
        public AboveBelow departure { get; set; }

        [XmlIgnore]
        public bool departureSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("ornaments")]
    public class Ornaments
    {
        [XmlElement("delayed-inverted-turn", typeof(HorizontalTurn))]
        [XmlElement("delayed-turn", typeof(HorizontalTurn))]
        [XmlElement("inverted-mordent", typeof(Mordent))]
        [XmlElement("inverted-turn", typeof(HorizontalTurn))]
        [XmlElement("mordent", typeof(Mordent))]
        [XmlElement("other-ornament", typeof(PlacementText))]
        [XmlElement("schleifer", typeof(EmptyPlacement))]
        [XmlElement("shake", typeof(EmptyTrillSound))]
        [XmlElement("tremolo", typeof(Tremolo))]
        [XmlElement("trill-mark", typeof(EmptyTrillSound))]
        [XmlElement("turn", typeof(HorizontalTurn))]
        [XmlElement("vertical-turn", typeof(EmptyTrillSound))]
        [XmlElement("wavy-line", typeof(WavyLine))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType2[] ItemsElementName { get; set; }

        [XmlElement("accidental-mark")]
        public AccidentalMark[] accidentalmark { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType2
    {
        [XmlEnum("delayed-inverted-turn")]
        DelayedInvertedTurn,

        [XmlEnum("delayed-turn")]
        DelayedTurn,

        [XmlEnum("inverted-mordent")]
        InvertedMordent,

        [XmlEnum("inverted-turn")]
        InvertedTurn,

        [XmlEnum("mordent")]
        Mordent,

        [XmlEnum("other-ornament")]
        OtherOrnament,

        [XmlEnum("schleifer")]
        Schleifer,

        [XmlEnum("shake")]
        Shake,

        [XmlEnum("tremolo")]
        Tremolo,

        [XmlEnum("trill-mark")]
        TrillMark,

        [XmlEnum("turn")]
        Turn,

        [XmlEnum("vertical-turn")]
        VerticalTurn,

        [XmlEnum("wavy-line")]
        WavyLine,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("slide")]
    public class Slide
    {
        public Slide()
        {
            this.number = "1";
        }

        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlAttribute("line-type")]
        public LineType linetype { get; set; }

        [XmlIgnore]
        public bool linetypeSpecified { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlAttribute("accelerate")]
        public YesNo accelerate { get; set; }

        [XmlIgnore]
        public bool accelerateSpecified { get; set; }

        [XmlAttribute("beats")]
        public decimal beats { get; set; }

        [XmlIgnore]
        public bool beatsSpecified { get; set; }

        [XmlAttribute("first-beat")]
        public decimal firstbeat { get; set; }

        [XmlIgnore]
        public bool firstbeatSpecified { get; set; }

        [XmlAttribute("last-beat")]
        public decimal lastbeat { get; set; }

        [XmlIgnore]
        public bool lastbeatSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("glissando")]
    public class Glissando
    {
        public Glissando()
        {
            this.number = "1";
        }

        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlAttribute("line-type")]
        public LineType linetype { get; set; }

        [XmlIgnore]
        public bool linetypeSpecified { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "tuplet-dot")]
    public class TupletDot
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "tuplet-type")]
    public class TupletType
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public NoteTypeValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "tuplet-number")]
    public class TupletNumber
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText(DataType = "nonNegativeInteger")]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "tuplet-portion")]
    public class TupletPortion
    {
        [XmlElement("tuplet-number")]
        public TupletNumber tupletnumber { get; set; }

        [XmlElement("tuplet-type")]
        public TupletType tuplettype { get; set; }

        [XmlElement("tuplet-dot")]
        public TupletDot[] tupletdot { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("tuplet")]
    public class Tuplet
    {
        [XmlElement("tuplet-actual")]
        public TupletPortion tupletactual { get; set; }

        [XmlElement("tuplet-normal")]
        public TupletPortion tupletnormal { get; set; }

        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("bracket")]
        public YesNo bracket { get; set; }

        [XmlIgnore]
        public bool bracketSpecified { get; set; }

        [XmlAttribute("show-number")]
        public ShowTuplet shownumber { get; set; }

        [XmlIgnore]
        public bool shownumberSpecified { get; set; }

        [XmlAttribute("show-type")]
        public ShowTuplet showtype { get; set; }

        [XmlIgnore]
        public bool showtypeSpecified { get; set; }

        [XmlAttribute("line-shape")]
        public LineShape lineshape { get; set; }

        [XmlIgnore]
        public bool lineshapeSpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("slur")]
    public class Slur
    {
        public Slur()
        {
            this.number = "1";
        }

        [XmlAttribute("type")]
        public StartStopContinue type { get; set; }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlAttribute("line-type")]
        public LineType linetype { get; set; }

        [XmlIgnore]
        public bool linetypeSpecified { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("orientation")]
        public OverUnder orientation { get; set; }

        [XmlIgnore]
        public bool orientationSpecified { get; set; }

        [XmlAttribute("bezier-offset")]
        public decimal bezieroffset { get; set; }

        [XmlIgnore]
        public bool bezieroffsetSpecified { get; set; }

        [XmlAttribute("bezier-offset2")]
        public decimal bezieroffset2 { get; set; }

        [XmlIgnore]
        public bool bezieroffset2Specified { get; set; }

        [XmlAttribute("bezier-x")]
        public decimal bezierx { get; set; }

        [XmlIgnore]
        public bool bezierxSpecified { get; set; }

        [XmlAttribute("bezier-y")]
        public decimal beziery { get; set; }

        [XmlIgnore]
        public bool bezierySpecified { get; set; }

        [XmlAttribute("bezier-x2")]
        public decimal bezierx2 { get; set; }

        [XmlIgnore]
        public bool bezierx2Specified { get; set; }

        [XmlAttribute("bezier-y2")]
        public decimal beziery2 { get; set; }

        [XmlIgnore]
        public bool beziery2Specified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "over-under")]
    public enum OverUnder
    {
        [XmlEnum("over")]
        Over,

        [XmlEnum("under")]
        Under,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("tied")]
    public class Tied
    {
        [XmlAttribute("type")]
        public StartStopContinue type { get; set; }

        [XmlAttribute("number", DataType = "positiveInteger")]
        public string number { get; set; }

        [XmlAttribute("line-type")]
        public LineType linetype { get; set; }

        [XmlIgnore]
        public bool linetypeSpecified { get; set; }

        [XmlAttribute("dash-length")]
        public decimal dashlength { get; set; }

        [XmlIgnore]
        public bool dashlengthSpecified { get; set; }

        [XmlAttribute("space-length")]
        public decimal spacelength { get; set; }

        [XmlIgnore]
        public bool spacelengthSpecified { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("placement")]
        public AboveBelow placement { get; set; }

        [XmlIgnore]
        public bool placementSpecified { get; set; }

        [XmlAttribute("orientation")]
        public OverUnder orientation { get; set; }

        [XmlIgnore]
        public bool orientationSpecified { get; set; }

        [XmlAttribute("bezier-offset")]
        public decimal bezieroffset { get; set; }

        [XmlIgnore]
        public bool bezieroffsetSpecified { get; set; }

        [XmlAttribute("bezier-offset2")]
        public decimal bezieroffset2 { get; set; }

        [XmlIgnore]
        public bool bezieroffset2Specified { get; set; }

        [XmlAttribute("bezier-x")]
        public decimal bezierx { get; set; }

        [XmlIgnore]
        public bool bezierxSpecified { get; set; }

        [XmlAttribute("bezier-y")]
        public decimal beziery { get; set; }

        [XmlIgnore]
        public bool bezierySpecified { get; set; }

        [XmlAttribute("bezier-x2")]
        public decimal bezierx2 { get; set; }

        [XmlIgnore]
        public bool bezierx2Specified { get; set; }

        [XmlAttribute("bezier-y2")]
        public decimal beziery2 { get; set; }

        [XmlIgnore]
        public bool beziery2Specified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("notations")]
    public class Notations
    {
        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlElement("accidental-mark", typeof(AccidentalMark))]
        [XmlElement("arpeggiate", typeof(Arpeggiate))]
        [XmlElement("articulations", typeof(Articulations))]
        [XmlElement("dynamics", typeof(Dynamics))]
        [XmlElement("fermata", typeof(Fermata))]
        [XmlElement("glissando", typeof(Glissando))]
        [XmlElement("non-arpeggiate", typeof(NonArpeggiate))]
        [XmlElement("ornaments", typeof(Ornaments))]
        [XmlElement("other-notation", typeof(OtherNotation))]
        [XmlElement("slide", typeof(Slide))]
        [XmlElement("slur", typeof(Slur))]
        [XmlElement("technical", typeof(Technical))]
        [XmlElement("tied", typeof(Tied))]
        [XmlElement("tuplet", typeof(Tuplet))]
        public object[] Items { get; set; }

        [XmlAttribute("print-object")]
        public YesNo printobject { get; set; }

        [XmlIgnore]
        public bool printobjectSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("beam")]
    public class Beam
    {
        public Beam()
        {
            this.number = "1";
        }

        [XmlAttribute(DataType = "positiveInteger")]
        [DefaultValue("1")]
        public string number { get; set; }

        [XmlAttribute("repeater")]
        public YesNo repeater { get; set; }

        [XmlIgnore]
        public bool repeaterSpecified { get; set; }

        [XmlAttribute("fan")]
        public Fan fan { get; set; }

        [XmlIgnore]
        public bool fanSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public BeamValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType("fan")]
    public enum Fan
    {
        [XmlEnum("accel")]
        Accel,

        [XmlEnum("rit")]
        Rit,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "notehead-text")]
    public class NoteheadText
    {
        [XmlElement("accidental-text", typeof(AccidentalText))]
        [XmlElement("display-text", typeof(FormattedText))]
        public object[] Items { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("notehead")]
    public class Notehead
    {
        [XmlAttribute("filled")]
        public YesNo filled { get; set; }

        [XmlIgnore]
        public bool filledSpecified { get; set; }

        [XmlAttribute("parentheses")]
        public YesNo parentheses { get; set; }

        [XmlIgnore]
        public bool parenthesesSpecified { get; set; }

        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public NoteheadValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "notehead-value")]
    public enum NoteheadValue
    {
        [XmlEnum("slash")]
        Slash,

        [XmlEnum("triangle")]
        Triangle,

        [XmlEnum("diamond")]
        Diamond,

        [XmlEnum("square")]
        Square,

        [XmlEnum("cross")]
        Cross,

        [XmlEnum("x")]
        X,

        [XmlEnum("circle-x")]
        CircleX,

        [XmlEnum("inverted triangle")]
        InvertedTriangle,

        [XmlEnum("arrow down")]
        ArrowDown,

        [XmlEnum("arrow up")]
        ArrowUp,

        [XmlEnum("slashed")]
        Slashed,

        [XmlEnum("back slashed")]
        BackSlashed,

        [XmlEnum("normal")]
        Normal,

        [XmlEnum("cluster")]
        Cluster,

        [XmlEnum("circle dot")]
        CircleDot,

        [XmlEnum("left triangle")]
        LeftTriangle,

        [XmlEnum("rectangle")]
        Rectangle,

        [XmlEnum("none")]
        None,

        [XmlEnum("do")]
        Do,

        [XmlEnum("re")]
        Re,

        [XmlEnum("mi")]
        Mi,

        [XmlEnum("fa")]
        Fa,

        [XmlEnum("fa up")]
        FaUp,

        [XmlEnum("so")]
        So,

        [XmlEnum("la")]
        La,

        [XmlEnum("ti")]
        Ti,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("stem")]
    public class Stem
    {
        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public StemValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "stem-value")]
    public enum StemValue
    {
        [XmlEnum("down")]
        Down,

        [XmlEnum("up")]
        Up,

        [XmlEnum("double")]
        Double,

        [XmlEnum("none")]
        None,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("accidental")]
    public class Accidental
    {
        [XmlAttribute("cautionary")]
        public YesNo cautionary { get; set; }

        [XmlIgnore]
        public bool cautionarySpecified { get; set; }

        [XmlAttribute("editorial")]
        public YesNo editorial { get; set; }

        [XmlIgnore]
        public bool editorialSpecified { get; set; }

        [XmlAttribute("parentheses")]
        public YesNo parentheses { get; set; }

        [XmlIgnore]
        public bool parenthesesSpecified { get; set; }

        [XmlAttribute("bracket")]
        public YesNo bracket { get; set; }

        [XmlIgnore]
        public bool bracketSpecified { get; set; }

        [XmlAttribute("size")]
        public SymbolSize size { get; set; }

        [XmlIgnore]
        public bool sizeSpecified { get; set; }

        [XmlText]
        public AccidentalValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "note-type")]
    public class NoteType
    {
        [XmlAttribute("size")]
        public SymbolSize size { get; set; }

        [XmlIgnore]
        public bool sizeSpecified { get; set; }

        [XmlText]
        public NoteTypeValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("instrument")]
    public class Instrument
    {
        [XmlAttribute("id", DataType = "IDREF")]
        public string id { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("tie")]
    public class Tie
    {
        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute("time-only", DataType = "token")]
        public string timeonly { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("rest")]
    public class Rest
    {
        [XmlElement("display-step")]
        public Step displaystep { get; set; }

        [XmlElement("display-octave", DataType = "integer")]
        public string displayoctave { get; set; }

        [XmlAttribute("measure")]
        public YesNo measure { get; set; }

        [XmlIgnore]
        public bool measureSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("unpitched")]
    public class Unpitched
    {
        [XmlElement("display-step")]
        public Step displaystep { get; set; }

        [XmlElement("display-octave", DataType = "integer")]
        public string displayoctave { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("pitch")]
    public class Pitch
    {
        [XmlElement("step")]
        public Step step { get; set; }

        [XmlElement("alter")]
        public decimal alter { get; set; }

        [XmlIgnore]
        public bool alterSpecified { get; set; }

        [XmlElement("octave", DataType = "integer")]
        public string octave { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("grace")]
    public class Grace
    {
        [XmlAttribute("steal-time-previous")]
        public decimal stealtimeprevious { get; set; }

        [XmlIgnore]
        public bool stealtimepreviousSpecified { get; set; }

        [XmlAttribute("steal-time-following")]
        public decimal stealtimefollowing { get; set; }

        [XmlIgnore]
        public bool stealtimefollowingSpecified { get; set; }

        [XmlAttribute("make-time")]
        public decimal maketime { get; set; }

        [XmlIgnore]
        public bool maketimeSpecified { get; set; }

        [XmlAttribute("slash")]
        public YesNo slash { get; set; }

        [XmlIgnore]
        public bool slashSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("note")]
    public class Note
    {
        [XmlElement("chord", typeof(Empty))]
        [XmlElement("cue", typeof(Empty))]
        [XmlElement("duration", typeof(decimal))]
        [XmlElement("grace", typeof(Grace))]
        [XmlElement("pitch", typeof(Pitch))]
        [XmlElement("rest", typeof(Rest))]
        [XmlElement("tie", typeof(Tie))]
        [XmlElement("unpitched", typeof(Unpitched))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType1[] ItemsElementName { get; set; }

        [XmlElement("instrument")]
        public Instrument instrument { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlElement("voice")]
        public string voice { get; set; }

        [XmlElement("type")]
        public NoteType type { get; set; }

        [XmlElement("dot")]
        public EmptyPlacement[] dot { get; set; }

        [XmlElement("accidental")]
        public Accidental accidental { get; set; }

        [XmlElement("time-modification")]
        public TimeModification timemodification { get; set; }

        [XmlElement("stem")]
        public Stem stem { get; set; }

        [XmlElement("notehead")]
        public Notehead notehead { get; set; }

        [XmlElement("notehead-text")]
        public NoteheadText noteheadtext { get; set; }

        [XmlElement("staff", DataType = "positiveInteger")]
        public string staff { get; set; }

        [XmlElement("beam")]
        public Beam[] beam { get; set; }

        [XmlElement("notations")]
        public Notations[] notations { get; set; }

        [XmlElement("lyric")]
        public Lyric[] lyric { get; set; }

        [XmlElement("play")]
        public Play play { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlAttribute("print-dot")]
        public YesNo printdot { get; set; }

        [XmlIgnore]
        public bool printdotSpecified { get; set; }

        [XmlAttribute("print-lyric")]
        public YesNo printlyric { get; set; }

        [XmlIgnore]
        public bool printlyricSpecified { get; set; }

        [XmlAttribute("dynamics")]
        public decimal dynamics { get; set; }

        [XmlIgnore]
        public bool dynamicsSpecified { get; set; }

        [XmlAttribute("end-dynamics")]
        public decimal enddynamics { get; set; }

        [XmlIgnore]
        public bool enddynamicsSpecified { get; set; }

        [XmlAttribute("attack")]
        public decimal attack { get; set; }

        [XmlIgnore]
        public bool attackSpecified { get; set; }

        [XmlAttribute("release")]
        public decimal release { get; set; }

        [XmlIgnore]
        public bool releaseSpecified { get; set; }

        [XmlAttribute("time-only", DataType = "token")]
        public string timeonly { get; set; }

        [XmlAttribute("pizzicato")]
        public YesNo pizzicato { get; set; }

        [XmlIgnore]
        public bool pizzicatoSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType1
    {
        [XmlEnum("chord")]
        Chord,

        [XmlEnum("cue")]
        Cue,

        [XmlEnum("duration")]
        Duration,

        [XmlEnum("grace")]
        Grace,

        [XmlEnum("pitch")]
        Pitch,

        [XmlEnum("rest")]
        Rest,

        [XmlEnum("tie")]
        Tie,

        [XmlEnum("unpitched")]
        Unpitched,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "virtual-instrument")]
    public class VirtualInstrument
    {
        [XmlElement("virtual-library")]
        public string virtuallibrary { get; set; }

        [XmlElement("virtual-name")]
        public string virtualname { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "score-instrument")]
    public class ScoreInstrument
    {
        [XmlElement("instrument-name")]
        public string instrumentname { get; set; }

        [XmlElement("instrument-abbreviation")]
        public string instrumentabbreviation { get; set; }

        [XmlElement("instrument-sound")]
        public string instrumentsound { get; set; }

        [XmlElement("ensemble", typeof(string))]
        [XmlElement("solo", typeof(Empty))]
        public object Item { get; set; }

        [XmlElement("virtual-instrument")]
        public VirtualInstrument virtualinstrument { get; set; }

        [XmlAttribute("id", DataType = "ID")]
        public string id { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "part-name")]
    public class PartName
    {
        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "score-part")]
    public class ScorePart
    {
        [XmlElement("identification")]
        public Identification identification { get; set; }

        [XmlElement("part-name")]
        public PartName partname { get; set; }

        [XmlElement("part-name-display")]
        public NameDisplay partnamedisplay { get; set; }

        [XmlElement("part-abbreviation")]
        public PartName partabbreviation { get; set; }

        [XmlElement("part-abbreviation-display")]
        public NameDisplay partabbreviationdisplay { get; set; }

        [XmlElement("group")]
        public string[] group { get; set; }

        [XmlElement("score-instrument")]
        public ScoreInstrument[] scoreinstrument { get; set; }

        [XmlElement("midi-device")]
        public MidiDevice[] mididevice { get; set; }

        [XmlElement("midi-instrument")]
        public MidiInstrument[] midiinstrument { get; set; }

        [XmlAttribute("id", DataType = "ID")]
        public string id { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("identification")]
    public class Identification
    {
        [XmlElement("creator")]
        public TypedText[] creator { get; set; }

        [XmlElement("rights")]
        public TypedText[] rights { get; set; }

        [XmlElement("encoding")]
        public Encoding encoding { get; set; }

        [XmlElement("source")]
        public string source { get; set; }

        [XmlElement("relation")]
        public TypedText[] relation { get; set; }

        [XmlArrayItemAttribute(IsNullable = false)]
        public MiscellaneousField[] miscellaneous { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "typed-text")]
    public class TypedText
    {
        [XmlAttribute("type", DataType = "token")]
        public string type { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("encoding")]
    public class Encoding
    {
        [XmlElement("encoder", typeof(TypedText))]
        [XmlElement("encoding-date", typeof(System.DateTime), DataType = "date")]
        [XmlElement("encoding-description", typeof(string))]
        [XmlElement("software", typeof(string))]
        [XmlElement("supports", typeof(Supports))]
        [XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }

        [XmlElement("ItemsElementName")]
        [XmlIgnore]
        public ItemsChoiceType[] ItemsElementName { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("supports")]
    public class Supports
    {
        [XmlAttribute("type")]
        public YesNo type { get; set; }

        [XmlAttribute("element", DataType = "NMTOKEN")]
        public string element { get; set; }

        [XmlAttribute("attribute", DataType = "NMTOKEN")]
        public string attribute { get; set; }

        [XmlAttribute("value", DataType = "token")]
        public string value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(IncludeInSchema = false)]
    public enum ItemsChoiceType
    {
        [XmlEnum("encoder")]
        Encoder,

        [XmlEnum("encoding-date")]
        EncodingDate,

        [XmlEnum("encoding-description")]
        EncodingDescription,

        [XmlEnum("software")]
        Software,

        [XmlEnum("supports")]
        Supports,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "miscellaneous-field")]
    public class MiscellaneousField
    {
        [XmlAttribute("name", DataType = "token")]
        public string name { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "group-barline")]
    public class GroupBarline
    {
        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public GroupBarlineValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "group-barline-value")]
    public enum GroupBarlineValue
    {
        [XmlEnum("yes")]
        Yes,

        [XmlEnum("no")]
        No,

        [XmlEnum("Mensurstrich")]
        Mensurstrich,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "group-symbol")]
    public class GroupSymbol
    {
        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }

        [XmlAttribute("color", DataType = "token")]
        public string color { get; set; }

        [XmlText]
        public GroupSymbolValue Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "group-name")]
    public class GroupName
    {
        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "part-group")]
    public class PartGroup
    {
        public PartGroup()
        {
            this.number = "1";
        }

        [XmlElement("group-name")]
        public GroupName groupname { get; set; }

        [XmlElement("group-name-display")]
        public NameDisplay groupnamedisplay { get; set; }

        [XmlElement("group-abbreviation")]
        public GroupName groupabbreviation { get; set; }

        [XmlElement("group-abbreviation-display")]
        public NameDisplay groupabbreviationdisplay { get; set; }

        [XmlElement("group-symbol")]
        public GroupSymbol groupsymbol { get; set; }

        [XmlElement("group-barline")]
        public GroupBarline groupbarline { get; set; }

        [XmlElement("group-time")]
        public Empty grouptime { get; set; }

        [XmlElement("footnote")]
        public FormattedText footnote { get; set; }

        [XmlElement("level")]
        public Level level { get; set; }

        [XmlAttribute("type")]
        public StartStop type { get; set; }

        [XmlAttribute(DataType = "token")]
        [DefaultValue("1")]
        public string number { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "part-list")]
    public class PartList
    {
        [XmlElement("part-group", Order = 0)]
        public PartGroup[] partgroup { get; set; }

        [XmlElement("score-part", Order = 1)]
        public ScorePart scorepart { get; set; }

        [XmlElement("part-group", typeof(PartGroup), Order = 2)]
        [XmlElement("score-part", typeof(ScorePart), Order = 2)]
        public object[] Items { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("bookmark")]
    public class Bookmark
    {
        [XmlAttribute("id", DataType = "ID")]
        public string id { get; set; }

        [XmlAttribute("name", DataType = "token")]
        public string name { get; set; }

        [XmlAttribute("element", DataType = "NMTOKEN")]
        public string element { get; set; }

        [XmlAttribute("position", DataType = "positiveInteger")]
        public string position { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("link")]
    public class Link
    {
        public Link()
        {
            this.type = OpusType.Simple;
            this.show = OpusShow.Replace;
            this.actuate = OpusActuate.OnRequest;
        }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/1999/xlink", DataType = "anyURI")]
        public string href { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/1999/xlink")]
        public OpusType type { get; set; }

        [XmlIgnore]
        public bool typeSpecified { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/1999/xlink", DataType = "token")]
        public string role { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/1999/xlink", DataType = "token")]
        public string title { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/1999/xlink")]
        [DefaultValue(OpusShow.Replace)]
        public OpusShow show { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/1999/xlink")]
        [DefaultValue(OpusActuate.OnRequest)]
        public OpusActuate actuate { get; set; }

        [XmlAttribute("name", DataType = "token")]
        public string name { get; set; }

        [XmlAttribute("element", DataType = "NMTOKEN")]
        public string element { get; set; }

        [XmlAttribute("position", DataType = "positiveInteger")]
        public string position { get; set; }

        [XmlAttribute("default-x")]
        public decimal defaultx { get; set; }

        [XmlIgnore]
        public bool defaultxSpecified { get; set; }

        [XmlAttribute("default-y")]
        public decimal defaulty { get; set; }

        [XmlIgnore]
        public bool defaultySpecified { get; set; }

        [XmlAttribute("relative-x")]
        public decimal relativex { get; set; }

        [XmlIgnore]
        public bool relativexSpecified { get; set; }

        [XmlAttribute("relative-y")]
        public decimal relativey { get; set; }

        [XmlIgnore]
        public bool relativeySpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("credit")]
    public class Credit
    {
        [XmlElement("credit-type", Order = 0)]
        public string[] credittype { get; set; }

        [XmlElement("link", Order = 1)]
        public Link[] link { get; set; }

        [XmlElement("bookmark", Order = 2)]
        public Bookmark[] bookmark { get; set; }

        [XmlElement("bookmark", typeof(Bookmark), Order = 3)]
        [XmlElement("credit-image", typeof(Image), Order = 3)]
        [XmlElement("credit-words", typeof(FormattedText), Order = 3)]
        [XmlElement("link", typeof(Link), Order = 3)]
        public object[] Items { get; set; }

        [XmlAttribute("page", DataType = "positiveInteger")]
        public string page { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "lyric-language")]
    public class LyricLanguage
    {
        [XmlAttribute("number", DataType = "NMTOKEN")]
        public string number { get; set; }

        [XmlAttribute("name", DataType = "token")]
        public string name { get; set; }

        [XmlAttribute(Form = XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "lyric-font")]
    public class LyricFont
    {
        [XmlAttribute("number", DataType = "NMTOKEN")]
        public string number { get; set; }

        [XmlAttribute("name", DataType = "token")]
        public string name { get; set; }

        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "empty-font")]
    public class EmptyFont
    {
        [XmlAttribute("font-family", DataType = "token")]
        public string fontfamily { get; set; }

        [XmlAttribute("font-style")]
        public FontStyle fontstyle { get; set; }

        [XmlIgnore]
        public bool fontstyleSpecified { get; set; }

        [XmlAttribute("font-size")]
        public string fontsize { get; set; }

        [XmlAttribute("font-weight")]
        public FontWeight fontweight { get; set; }

        [XmlIgnore]
        public bool fontweightSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "other-appearance")]
    public class OtherAppearance
    {
        [XmlAttribute("type", DataType = "token")]
        public string type { get; set; }

        [XmlText]
        public string Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("distance")]
    public class Distance
    {
        [XmlAttribute("type", DataType = "token")]
        public string type { get; set; }

        [XmlText]
        public decimal Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "note-size")]
    public class NoteSize
    {
        [XmlAttribute("type")]
        public NoteSizeType type { get; set; }

        [XmlText]
        public decimal Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [XmlType(TypeName = "note-size-type")]
    public enum NoteSizeType
    {
        [XmlEnum("cue")]
        Cue,
        [XmlEnum("grace")]
        Grace,
        [XmlEnum("large")]
        Large,
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "line-width")]
    public class LineWidth
    {
        [XmlAttribute("type", DataType = "token")]
        public string type { get; set; }

        [XmlText]
        public decimal Value { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("appearance")]
    public class Appearance
    {
        [XmlElement("line-width")]
        public LineWidth[] linewidth { get; set; }

        [XmlElement("note-size")]
        public NoteSize[] notesize { get; set; }

        [XmlElement("distance")]
        public Distance[] distance { get; set; }

        [XmlElement("other-appearance")]
        public OtherAppearance[] otherappearance { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("scaling")]
    public class Scaling
    {
        [XmlElement("millimeters")]
        public decimal millimeters { get; set; }

        [XmlElement("tenths")]
        public decimal tenths { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType("defaults")]
    public class Defaults
    {
        [XmlElement("scaling")]
        public Scaling scaling { get; set; }

        [XmlElement("page-layout")]
        public PageLayout pagelayout { get; set; }

        [XmlElement("system-layout")]
        public SystemLayout systemlayout { get; set; }

        [XmlElement("staff-layout")]
        public StaffLayout[] stafflayout { get; set; }

        [XmlElement("appearance")]
        public Appearance appearance { get; set; }

        [XmlElement("music-font")]
        public EmptyFont musicfont { get; set; }

        [XmlElement("word-font")]
        public EmptyFont wordfont { get; set; }

        [XmlElement("lyric-font")]
        public LyricFont[] lyricfont { get; set; }

        [XmlElement("lyric-language")]
        public LyricLanguage[] lyriclanguage { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "scorepartwisePart", AnonymousType = true)]
    public class ScorePartwisePart
    {
        [XmlElement("measure")]
        public ScorePartwisePartMeasure[] measure { get; set; }

        [XmlAttribute("id", DataType = "IDREF")]
        public string id { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "scorepartwisePartMeasure", AnonymousType = true)]
    public class ScorePartwisePartMeasure
    {
        [XmlElement("attributes", typeof(Attributes))]
        [XmlElement("backup", typeof(Backup))]
        [XmlElement("barline", typeof(BarLine))]
        [XmlElement("bookmark", typeof(Bookmark))]
        [XmlElement("direction", typeof(Direction))]
        [XmlElement("figured-bass", typeof(FiguredBass))]
        [XmlElement("forward", typeof(Forward))]
        [XmlElement("grouping", typeof(Grouping))]
        [XmlElement("harmony", typeof(Harmony))]
        [XmlElement("link", typeof(Link))]
        [XmlElement("note", typeof(Note))]
        [XmlElement("print", typeof(Print))]
        [XmlElement("sound", typeof(Sound))]
        public object[] Items { get; set; }

        [XmlAttribute("number", DataType = "token")]
        public string number { get; set; }

        [XmlAttribute("implicit")]
        public YesNo @implicit { get; set; }

        [XmlIgnore]
        public bool implicitSpecified { get; set; }

        [XmlAttribute("non-controlling")]
        public YesNo noncontrolling { get; set; }

        [XmlIgnore]
        public bool noncontrollingSpecified { get; set; }

        [XmlAttribute("width")]
        public decimal width { get; set; }

        [XmlIgnore]
        public bool widthSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot("score-timewise", Namespace = "", IsNullable = false)]
    public class ScoreTimewise
    {
        public ScoreTimewise()
        {
            this.version = "1.0";
        }

        [XmlElement("work")]
        public Work work { get; set; }

        [XmlElement("movement-number")]
        public string movementnumber { get; set; }

        [XmlElement("movement-title")]
        public string movementtitle { get; set; }

        [XmlElement("identification")]
        public Identification identification { get; set; }

        [XmlElement("defaults")]
        public Defaults defaults { get; set; }

        [XmlElement("credit")]
        public Credit[] credit { get; set; }

        [XmlElement("part-list")]
        public PartList partlist { get; set; }

        [XmlElement("measure")]
        public ScoreTimewiseMeasure[] measure { get; set; }

        [XmlAttribute(DataType = "token")]
        [DefaultValue("1.0")]
        public string version { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "scoretimewiseMeasure", AnonymousType = true)]
    public class ScoreTimewiseMeasure
    {
        [XmlElement("part")]
        public ScoreTimewiseMeasurePart[] part { get; set; }

        [XmlAttribute("number", DataType = "token")]
        public string number { get; set; }

        [XmlAttribute("implicit")]
        public YesNo @implicit { get; set; }

        [XmlIgnore]
        public bool implicitSpecified { get; set; }

        [XmlAttribute("non-controlling")]
        public YesNo noncontrolling { get; set; }

        [XmlIgnore]
        public bool noncontrollingSpecified { get; set; }

        [XmlAttribute("width")]
        public decimal width { get; set; }

        [XmlIgnore]
        public bool widthSpecified { get; set; }
    }

    [GeneratedCode("xsd", "4.0.30319.18020")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(TypeName = "scoretimewiseMeasurePart", AnonymousType = true)]
    public class ScoreTimewiseMeasurePart
    {
        [XmlElement("attributes", typeof(Attributes))]
        [XmlElement("backup", typeof(Backup))]
        [XmlElement("barline", typeof(BarLine))]
        [XmlElement("bookmark", typeof(Bookmark))]
        [XmlElement("direction", typeof(Direction))]
        [XmlElement("figured-bass", typeof(FiguredBass))]
        [XmlElement("forward", typeof(Forward))]
        [XmlElement("grouping", typeof(Grouping))]
        [XmlElement("harmony", typeof(Harmony))]
        [XmlElement("link", typeof(Link))]
        [XmlElement("note", typeof(Note))]
        [XmlElement("print", typeof(Print))]
        [XmlElement("sound", typeof(Sound))]
        public object[] Items { get; set; }

        [XmlAttribute("id", DataType = "IDREF")]
        public string id { get; set; }
    }
}